{"category":"SG90Driver","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_SG90DRIVER_LANGUAGES = {\n  \"CUSTOM_SG90DRIVER_INIT\": {\n    \"en\": \"%1 init, offset: %2\"\n  },\n  \"CUSTOM_SG90DRIVER_CREATE_PWM\": {\n    \"en\": \" %1 create_pwm, pin: %2\"\n  },\n  \"CUSTOM_SG90DRIVER_MOVE_DIRECT\": {\n    \"en\": \" %1 move_direct, h_deg: %2, v_deg: %3\"\n  },\n  \"CUSTOM_SG90DRIVER_MOVE\": {\n    \"en\": \" %1 move, h_deg: %2, v_deg: %3, tm: %4\"\n  },\n  \"CUSTOM_SG90DRIVER_MOTOR\": {\n    \"en\": \" %1 motor, flag: %2\"\n  }\n};\n\nconst initType = 'custom_sg90driver_init';\nBlockly.BlockRegExpList['custom_sg90driver'] = {\n  regexp: new RegExp(/^custom_sg90driver_/),\n  code: \"from SG90Driver import SG90Driver\",\n  initBlockType: initType,\n  categoryId: 'custom_sg90driver',\n}\nBlockly.utils.registerLanguages(CUSTOM_SG90DRIVER_LANGUAGES)\n\nBlockly.Msg.CUSTOM_SG90DRIVER_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_SG90DRIVER = 'SG90Driver'\n\nBlockly.utils.getcustom_sg90driverOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['sg90driver_0', 'sg90driver_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_sg90driver_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SG90DRIVER_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_sg90driverOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'sg90driver_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'offset'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_sg90driver_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var offset = Blockly.Python.valueToCode(block, 'offset', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = SG90Driver(${offset})\\n`\n}\n\nBlockly.Blocks[\"custom_sg90driver_create_pwm\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SG90DRIVER_CREATE_PWM,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_sg90driverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'pin'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_sg90driver_create_pwm\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.create_pwm(${pin})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_sg90driver_move_direct\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SG90DRIVER_MOVE_DIRECT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_sg90driverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'h_deg'\n        }, {\n          'type': 'input_value',\n          'name': 'v_deg'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_sg90driver_move_direct\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var h_deg = Blockly.Python.valueToCode(block, 'h_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  var v_deg = Blockly.Python.valueToCode(block, 'v_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.move_direct(${h_deg}, ${v_deg})\\n`\n}\n\nBlockly.Blocks[\"custom_sg90driver_move\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SG90DRIVER_MOVE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_sg90driverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'h_deg'\n        }, {\n          'type': 'input_value',\n          'name': 'v_deg'\n        }, {\n          'type': 'input_value',\n          'name': 'tm'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_sg90driver_move\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var h_deg = Blockly.Python.valueToCode(block, 'h_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  var v_deg = Blockly.Python.valueToCode(block, 'v_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.move(${h_deg}, ${v_deg}, ${tm})\\n`\n}\n\nBlockly.Blocks[\"custom_sg90driver_motor\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SG90DRIVER_MOTOR,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_sg90driverOptions\n        },\n        {\n          \"type\": \"field_switch\",\n          \"name\": \"flag\",\n          \"options\": [\n            ['True', 'True'],\n            ['False', 'False']\n          ],\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_sg90driver_motor\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var flag = block.getFieldValue('flag');\n  return `${varname}.motor(${flag})\\n`\n}","toolbox":"\n<category name=\"SG90Driver\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_sg90driver\">\n<title text=\"SG90Driver\" docsLink=\"\"></title>\n<block type=\"custom_sg90driver_init\">\n  <value name=\"offset\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">56</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_sg90driver_create_pwm\">\n  <value name=\"pin\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_sg90driver_move_direct\">\n  <value name=\"h_deg\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"v_deg\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_sg90driver_move\">\n  <value name=\"h_deg\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"v_deg\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"tm\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0.5</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_sg90driver_motor\">\n  <field name=\"flag\">True</field>\n</block>\n</category>\n","toolboxitemid":"custom_sg90driver","block_type":["custom_sg90driver___init__","custom_sg90driver_create_pwm","custom_sg90driver_move_direct","custom_sg90driver_move","custom_sg90driver_motor"]},"data":{"name":"SG90Driver","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"from M5 import *\r\nimport machine\r\nimport time\r\nimport math\r\ndef sign(x):\r\n    return (x > 0) - (x < 0)\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init, offset: %2"},"params":[{"name":"offset","type":"int","default":"56","note":{},"field":""}],"return":"","source":"    self.min = 500 * 65535 // 20000\r\n    self.max = 2500 * 65535 // 20000\r\n    self.zero = (1500+offset) * 65535 // 20000\r\n    self.ddeg = (self.max -self.min) / 180.0\r\n    self.delay=0.02\r\n    self.motor(True)\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"create_pwm","note":{},"label":{"en":" %1 create_pwm, pin: %2"},"params":[{"name":"pin","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    return machine.PWM(pin, freq=50, duty_u16=self.zero)\r","ast_return":{"code":"machine.PWM(pin, freq=50, duty_u16=self.zero)","id":null},"doc_return":null},{"name":"move_direct","note":{},"label":{"en":" %1 move_direct, h_deg: %2, v_deg: %3"},"params":[{"name":"h_deg","type":null,"default":null,"note":{},"field":""},{"name":"v_deg","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    self.h_motor.duty_u16(self.zero + int(self.ddeg * h_deg))\r\n    self.v_motor.duty_u16(self.zero + int(self.ddeg * v_deg))\r\n    self.current_pos=[h_deg, v_deg]\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"move","note":{},"label":{"en":" %1 move, h_deg: %2, v_deg: %3, tm: %4"},"params":[{"name":"h_deg","type":null,"default":null,"note":{},"field":""},{"name":"v_deg","type":null,"default":null,"note":{},"field":""},{"name":"tm","type":"float","default":"0.5","note":{},"field":""}],"return":"","source":"    h_deg = max(min(h_deg, 90), -90)\r\n    v_deg = max(min(v_deg, 5), -30)\r\n\r\n    n = int(tm / self.delay)\r\n    h_dg = (h_deg - self.current_pos[0]) / n\r\n    v_dg = (v_deg - self.current_pos[1]) / n\r\n\r\n    for x in range(0, n):\r\n      h_target_ = self.current_pos[0] + h_dg\r\n      v_target_ = self.current_pos[1] + v_dg\r\n      self.h_motor.duty_u16(self.zero + int(self.ddeg * h_target_))\r\n      self.v_motor.duty_u16(self.zero + int(self.ddeg * v_target_))\r\n      time.sleep(self.delay)\r\n      self.current_pos = [h_target_, v_target_]\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"motor","note":{},"label":{"en":" %1 motor, flag: %2"},"params":[{"name":"flag","type":"bool","default":"True","note":{},"field":"switch"}],"return":"","source":"    if flag:\r\n        self.h_motor=self.create_pwm(2) # PortA-> 2, PortC -> 17\r\n        self.v_motor=self.create_pwm(9)  # PortB -> 9\r\n        self.current_pos=[0,0]\r\n    else:\r\n        self.h_motor.deinit()\r\n        self.v_motor.deinit()\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"sg90driver"},"pyCode":"\n\"\"\"\nfile     SG90Driver\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nfrom M5 import *\nimport machine\nimport time\nimport math\ndef sign(x):\n    return (x > 0) - (x < 0)\n\nclass SG90Driver:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, offset: int = 56):\n        \"\"\"\n        label:\n            en: '%1 init, offset: %2'\n        params:\n            offset:\n                name: offset\n                type: int\n                default: '56'\n        \"\"\"\n    self.min = 500 * 65535 // 20000\n    self.max = 2500 * 65535 // 20000\n    self.zero = (1500+offset) * 65535 // 20000\n    self.ddeg = (self.max -self.min) / 180.0\n    self.delay=0.02\n    self.motor(True)\n\n    def create_pwm(self, pin):\n        \"\"\"\n        label:\n            en: ' %1 create_pwm, pin: %2'\n        params:\n            pin:\n                name: pin\n        \"\"\"\n    return machine.PWM(pin, freq=50, duty_u16=self.zero)\n\n    def move_direct(self, h_deg, v_deg):\n        \"\"\"\n        label:\n            en: ' %1 move_direct, h_deg: %2, v_deg: %3'\n        params:\n            h_deg:\n                name: h_deg\n            v_deg:\n                name: v_deg\n        \"\"\"\n    self.h_motor.duty_u16(self.zero + int(self.ddeg * h_deg))\n    self.v_motor.duty_u16(self.zero + int(self.ddeg * v_deg))\n    self.current_pos=[h_deg, v_deg]\n    return\n\n    def move(self, h_deg, v_deg, tm: float = 0.5):\n        \"\"\"\n        label:\n            en: ' %1 move, h_deg: %2, v_deg: %3, tm: %4'\n        params:\n            h_deg:\n                name: h_deg\n            v_deg:\n                name: v_deg\n            tm:\n                name: tm\n                type: float\n                default: '0.5'\n        \"\"\"\n    h_deg = max(min(h_deg, 90), -90)\n    v_deg = max(min(v_deg, 5), -30)\n\n    n = int(tm / self.delay)\n    h_dg = (h_deg - self.current_pos[0]) / n\n    v_dg = (v_deg - self.current_pos[1]) / n\n\n    for x in range(0, n):\n      h_target_ = self.current_pos[0] + h_dg\n      v_target_ = self.current_pos[1] + v_dg\n      self.h_motor.duty_u16(self.zero + int(self.ddeg * h_target_))\n      self.v_motor.duty_u16(self.zero + int(self.ddeg * v_target_))\n      time.sleep(self.delay)\n      self.current_pos = [h_target_, v_target_]\n    return\n\n    def motor(self, flag: bool = True):\n        \"\"\"\n        label:\n            en: ' %1 motor, flag: %2'\n        params:\n            flag:\n                name: flag\n                type: bool\n                default: 'True'\n                field: switch\n        \"\"\"\n    if flag:\n        self.h_motor=self.create_pwm(2) # PortA-> 2, PortC -> 17\n        self.v_motor=self.create_pwm(9)  # PortB -> 9\n        self.current_pos=[0,0]\n    else:\n        self.h_motor.deinit()\n        self.v_motor.deinit()\n    return\n\n\n","version":"alpha2"}
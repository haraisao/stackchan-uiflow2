{"category":"Voice","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_VOICE_LANGUAGES = {\n  \"CUSTOM_VOICE_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_VOICE_SETVOLUME\": {\n    \"en\": \" %1 setVolume, x: %2\"\n  },\n  \"CUSTOM_VOICE_RECORD\": {\n    \"en\": \" %1 record, sec: %2\"\n  },\n  \"CUSTOM_VOICE_PLAY\": {\n    \"en\": \" %1 play, data: %2\"\n  },\n  \"CUSTOM_VOICE_CALC_POWER\": {\n    \"en\": \" %1 calc_power, indata: %2\"\n  }\n};\n\nconst initType = 'custom_voice_init';\nBlockly.BlockRegExpList['custom_voice'] = {\n  regexp: new RegExp(/^custom_voice_/),\n  code: \"from Voice import Voice\",\n  initBlockType: initType,\n  categoryId: 'custom_voice',\n}\nBlockly.utils.registerLanguages(CUSTOM_VOICE_LANGUAGES)\n\nBlockly.Msg.CUSTOM_VOICE_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_VOICE = 'Voice'\n\nBlockly.utils.getcustom_voiceOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['voice_0', 'voice_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_voice_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICE_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_voiceOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'voice_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_voice_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = Voice()\\n`\n}\n\nBlockly.Blocks[\"custom_voice_setvolume\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICE_SETVOLUME,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voiceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'x'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voice_setvolume\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.setVolume(${x})\\n`\n}\n\nBlockly.Blocks[\"custom_voice_record\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICE_RECORD,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voiceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'sec'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voice_record\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var sec = Blockly.Python.valueToCode(block, 'sec', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.record(${sec})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voice_play\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICE_PLAY,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voiceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voice_play\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.play(${data})\\n`\n}\n\nBlockly.Blocks[\"custom_voice_calc_power\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICE_CALC_POWER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voiceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'indata'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voice_calc_power\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var indata = Blockly.Python.valueToCode(block, 'indata', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.calc_power(${indata})`, Blockly.Python.ORDER_NONE]\n}","toolbox":"\n<category name=\"Voice\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_voice\">\n<title text=\"Voice\" docsLink=\"\"></title>\n<block type=\"custom_voice_init\"/><block type=\"custom_voice_setvolume\">\n  <value name=\"x\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voice_record\">\n  <value name=\"sec\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">5</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voice_play\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_voice_calc_power\">\n  <value name=\"indata\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block>\n</category>\n","toolboxitemid":"custom_voice","block_type":["custom_voice___init__","custom_voice_setvolume","custom_voice_record","custom_voice_play","custom_voice_calc_power"]},"data":{"name":"Voice","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"from M5 import *\r\nimport time\r\nimport struct\r\nimport math\r\ndef calc_power(indata):\r\n  indata2 = struct.unpack(f\"{len(indata) / 2:.0f}h\", indata)\r\n  sqr_sum = sum([x*x for x in indata2])\r\n  rms = math.sqrt(sqr_sum/len(indata2))\r\n  power = 20 * math.log10(rms) if rms > 0.0 else -math.inf \r\n  return power\r\ndef record(tm=10, thr=38.5):\r\n    Mic.begin()\r\n    ds=0.5\r\n    tm0=time.time()+tm\r\n    res=b\"\"\r\n    thr=34\r\n    flag=False\r\n    while time.time() < tm0:\r\n      rec_data_ = bytearray(int(8000 * ds))\r\n      Mic.record(rec_data_, 8000, False)\r\n      while Mic.isRecording():\r\n        time.sleep_ms(100)\r\n      if calc_power(rec_data_) > thr:\r\n        flag=True\r\n        res +=rec_data_\r\n      elif flag:\r\n        Mic.end()\r\n        return res\r\n    Mic.end()\r\n    return res\r\ndef play(data, sample_rate=8000):\r\n  Speaker.begin()\r\n  Speaker.setVolumePercentage(50)\r\n  Speaker.playRaw(data, sample_rate)\r\n  while Speaker.isPlaying():\r\n    time.sleep_ms(500)\r\n  Speaker.end()","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"return":"","source":"    self.setVolume()\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"setVolume","note":{},"label":{"en":" %1 setVolume, x: %2"},"params":[{"name":"x","type":"int","default":"1","note":{},"field":""}],"return":"","source":"    Speaker.begin()\r\n    Speaker.setVolumePercentage(x)\r\n    Speaker.end()\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"record","note":{},"label":{"en":" %1 record, sec: %2"},"params":[{"name":"sec","type":"int","default":"5","note":{},"field":""}],"return":"","source":"    Mic.begin()\r\n    rec_data = bytearray(8000 * sec)\r\n    Mic.record(rec_data, 8000, False)\r\n    while Mic.isRecording():\r\n      time.sleep_ms(500)\r\n    Mic.end()\r\n    return rec_data\r","ast_return":{"code":"rec_data","id":null},"doc_return":null},{"name":"play","note":{},"label":{"en":" %1 play, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    Speaker.begin()\r\n    Speaker.playRaw(data, 8000)\r\n    while Speaker.isPlaying():\r\n      time.sleep_ms(500)\r\n    Speaker.end()\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"calc_power","note":{},"label":{"en":" %1 calc_power, indata: %2"},"params":[{"name":"indata","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    indata2 = struct.unpack(f\"{len(indata) / 2:.0f}h\", indata)\r\n    sqr_sum = [x*x for x in indata2]\r\n    rms = math.sqrt(sqr_sum/len(indata2))\r\n    power = 20 * math.log10(rms) if rms > 0.0 else -math.inf \r\n    return power\r","ast_return":{"code":"power","id":null},"doc_return":null}],"python_file_name":"voice"},"pyCode":"\n\"\"\"\nfile     Voice\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nfrom M5 import *\nimport time\nimport struct\nimport math\ndef calc_power(indata):\n  indata2 = struct.unpack(f\"{len(indata) / 2:.0f}h\", indata)\n  sqr_sum = sum([x*x for x in indata2])\n  rms = math.sqrt(sqr_sum/len(indata2))\n  power = 20 * math.log10(rms) if rms > 0.0 else -math.inf \n  return power\ndef record(tm=10, thr=38.5):\n    Mic.begin()\n    ds=0.5\n    tm0=time.time()+tm\n    res=b\"\"\n    thr=34\n    flag=False\n    while time.time() < tm0:\n      rec_data_ = bytearray(int(8000 * ds))\n      Mic.record(rec_data_, 8000, False)\n      while Mic.isRecording():\n        time.sleep_ms(100)\n      if calc_power(rec_data_) > thr:\n        flag=True\n        res +=rec_data_\n      elif flag:\n        Mic.end()\n        return res\n    Mic.end()\n    return res\ndef play(data, sample_rate=8000):\n  Speaker.begin()\n  Speaker.setVolumePercentage(50)\n  Speaker.playRaw(data, sample_rate)\n  while Speaker.isPlaying():\n    time.sleep_ms(500)\n  Speaker.end()\n\nclass Voice:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n    self.setVolume()\n\n    def setVolume(self, x: int = 1):\n        \"\"\"\n        label:\n            en: ' %1 setVolume, x: %2'\n        params:\n            x:\n                name: x\n                type: int\n                default: '1'\n        \"\"\"\n    Speaker.begin()\n    Speaker.setVolumePercentage(x)\n    Speaker.end()\n\n    def record(self, sec: int = 5):\n        \"\"\"\n        label:\n            en: ' %1 record, sec: %2'\n        params:\n            sec:\n                name: sec\n                type: int\n                default: '5'\n        \"\"\"\n    Mic.begin()\n    rec_data = bytearray(8000 * sec)\n    Mic.record(rec_data, 8000, False)\n    while Mic.isRecording():\n      time.sleep_ms(500)\n    Mic.end()\n    return rec_data\n\n    def play(self, data):\n        \"\"\"\n        label:\n            en: ' %1 play, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n    Speaker.begin()\n    Speaker.playRaw(data, 8000)\n    while Speaker.isPlaying():\n      time.sleep_ms(500)\n    Speaker.end()\n\n    def calc_power(self, indata):\n        \"\"\"\n        label:\n            en: ' %1 calc_power, indata: %2'\n        params:\n            indata:\n                name: indata\n        \"\"\"\n    indata2 = struct.unpack(f\"{len(indata) / 2:.0f}h\", indata)\n    sqr_sum = [x*x for x in indata2]\n    rms = math.sqrt(sqr_sum/len(indata2))\n    power = 20 * math.log10(rms) if rms > 0.0 else -math.inf \n    return power\n\n\n","version":"alpha2"}
{"category":"Voicevox","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_VOICEVOX_LANGUAGES = {\n  \"CUSTOM_VOICEVOX_INIT\": {\n    \"en\": \"%1 init, host: %2 , id: %3\"\n  },\n  \"CUSTOM_VOICEVOX_SETURL\": {\n    \"en\": \" %1 setUrl, host: %2, id: %3\"\n  },\n  \"CUSTOM_VOICEVOX_SET_SPEAKER\": {\n    \"en\": \" %1 set_speaker, id: %2\"\n  },\n  \"CUSTOM_VOICEVOX_REQUEST_TTS\": {\n    \"en\": \" %1 request_tts, txt: %2\"\n  },\n  \"CUSTOM_VOICEVOX_EXECUTE\": {\n    \"en\": \" %1 execute, txt: %2\"\n  },\n  \"CUSTOM_VOICEVOX_PLAY_WAV\": {\n    \"en\": \" %1 play_wav, data: %2, rate: %3\"\n  }\n};\n\nconst initType = 'custom_voicevox_init';\nBlockly.BlockRegExpList['custom_voicevox'] = {\n  regexp: new RegExp(/^custom_voicevox_/),\n  code: \"from Voicevox import Voicevox\",\n  initBlockType: initType,\n  categoryId: 'custom_voicevox',\n}\nBlockly.utils.registerLanguages(CUSTOM_VOICEVOX_LANGUAGES)\n\nBlockly.Msg.CUSTOM_VOICEVOX_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_VOICEVOX = 'Voicevox'\n\nBlockly.utils.getcustom_voicevoxOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['voicevox_0', 'voicevox_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_voicevox_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICEVOX_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_voicevoxOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'voicevox_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'host'\n        }, {\n          'type': 'input_value',\n          'name': 'id'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_voicevox_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var host = Blockly.Python.valueToCode(block, 'host', Blockly.Python.ORDER_FUNCTION_CALL);\n  var id = Blockly.Python.valueToCode(block, 'id', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = Voicevox(${host}, ${id})\\n`\n}\n\nBlockly.Blocks[\"custom_voicevox_seturl\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICEVOX_SETURL,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voicevoxOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'host'\n        }, {\n          'type': 'input_value',\n          'name': 'id'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voicevox_seturl\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var host = Blockly.Python.valueToCode(block, 'host', Blockly.Python.ORDER_FUNCTION_CALL);\n  var id = Blockly.Python.valueToCode(block, 'id', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.setUrl(${host}, ${id})\\n`\n}\n\nBlockly.Blocks[\"custom_voicevox_set_speaker\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICEVOX_SET_SPEAKER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voicevoxOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'id'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voicevox_set_speaker\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var id = Blockly.Python.valueToCode(block, 'id', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.set_speaker(${id})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voicevox_request_tts\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICEVOX_REQUEST_TTS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voicevoxOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'txt'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voicevox_request_tts\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var txt = Blockly.Python.valueToCode(block, 'txt', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.request_tts(${txt})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voicevox_execute\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICEVOX_EXECUTE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voicevoxOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'txt'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voicevox_execute\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var txt = Blockly.Python.valueToCode(block, 'txt', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.execute(${txt})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voicevox_play_wav\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOICEVOX_PLAY_WAV,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voicevoxOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        }, {\n          'type': 'input_value',\n          'name': 'rate'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voicevox_play_wav\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  var rate = Blockly.Python.valueToCode(block, 'rate', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.play_wav(${data}, ${rate})\\n`\n}","toolbox":"\n<category name=\"Voicevox\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_voicevox\">\n<title text=\"Voicevox\" docsLink=\"\"></title>\n<block type=\"custom_voicevox_init\">\n  <value name=\"host\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">192.168.1.47</field>\n    </shadow>\n  </value>\n  <value name=\"id\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voicevox_seturl\">\n  <value name=\"host\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">None</field>\n    </shadow>\n  </value>\n  <value name=\"id\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voicevox_set_speaker\">\n  <value name=\"id\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voicevox_request_tts\">\n  <value name=\"txt\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_voicevox_execute\">\n  <value name=\"txt\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_voicevox_play_wav\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"rate\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">8000</field>\n    </shadow>\n  </value>\n</block>\n</category>\n","toolboxitemid":"custom_voicevox","block_type":["custom_voicevox___init__","custom_voicevox_seturl","custom_voicevox_set_speaker","custom_voicevox_request_tts","custom_voicevox_execute","custom_voicevox_play_wav"]},"data":{"name":"Voicevox","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"from M5 import *\r\nimport sys\r\nimport requests2\r\nimport time\r\nfrom comm import Command, response200,response500\r\nimport json\r\nimport struct\r\nTXT=\"こんにちは\"\r\ndef play_audio(data, sample_rate=8000, volume=50):\r\n  Speaker.begin()\r\n  Speaker.setVolumePercentage(volume)\r\n  Speaker.playRaw(data, sample_rate)\r\n  while Speaker.isPlaying():\r\n    time.sleep_ms(100)\r\n  Speaker.end()\r\n  return\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init, host: %2 , id: %3"},"params":[{"name":"host","type":"str","default":"192.168.1.47","note":{},"field":""},{"name":"id","type":"int","default":"1","note":{},"field":""}],"return":"","source":"        self.header = {\"Content-Type\": \"application/json\"}\r\n        self.result_wav_file=\"audio.wav\"\r\n        self.query=\"\"\r\n        self.setUrl(host, id)\r\n        self.requesting=False\r\n        self._volume = 50\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"setUrl","note":{},"label":{"en":" %1 setUrl, host: %2, id: %3"},"params":[{"name":"host","type":null,"default":"None","note":{},"field":""},{"name":"id","type":"int","default":"1","note":{},"field":""}],"return":"","source":"        if host: self.host=host\r\n        self.id=id\r\n        self.query_url=\"http://%s:50021/audio_query?speaker=%d\" % (self.host, self.id)\r\n        self.synth_url=\"http://%s:50021/synthesis?speaker=%d\" % (self.host, self.id)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_speaker","note":{},"label":{"en":" %1 set_speaker, id: %2"},"params":[{"name":"id","type":"int","default":"1","note":{},"field":""}],"return":"","source":"        if isinstance(id, str):\r\n            self.id = int(id)\r\n        else:\r\n            self.id=id\r\n        return self.id\r","ast_return":{"code":"self.id","id":null},"doc_return":null},{"name":"request_tts","note":{},"label":{"en":" %1 request_tts, txt: %2"},"params":[{"name":"txt","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        if self.requesting:\r\n            return False\r\n        #print(\"===\", txt)\r\n        self.requesting=True\r\n        encode_txt=[\"%%%X\" % x for x in txt.encode('utf-8')]\r\n        #print(txt, encode_txt)\r\n        res = requests2.post(self.query_url+\"&text=\"+\"\".join(encode_txt), headers=self.header)\r\n        self.query = b\"\"\r\n\r\n        if res.status_code == 200:\r\n            self.query=res.content\r\n            res = requests2.post(self.synth_url, data=self.query, headers=self.header)\r\n            if res.status_code == 200:\r\n                self.play_wav(res.content)\r\n                #rate=struct.unpack(\"I\", res.content[24:28])[0]\r\n                #Voice.play(res.content[44:], rate)\r\n            else:\r\n                print(\"Fail to synthesize\")\r\n                self.requesting=False\r\n                return False\r\n        else:\r\n            print(\"Fail to get query\")\r\n            self.requesting=False\r\n            return False\r\n        self.requesting=False\r\n        return True\r","ast_return":{"code":"True","id":null},"doc_return":null},{"name":"execute","note":{},"label":{"en":" %1 execute, txt: %2"},"params":[{"name":"txt","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        if self.request_tts(txt):\r\n            return response200('application/json', json.dumps({\"result\": \"OK\"}))\r\n        else:\r\n            return response500()\r","ast_return":{"code":"response200('application/json', json.dumps({'result': 'OK'}))","id":null},"doc_return":null},{"name":"play_wav","note":{},"label":{"en":" %1 play_wav, data: %2, rate: %3"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""},{"name":"rate","type":"int","default":"8000","note":{},"field":""}],"return":"","source":"        if data[:4].decode() == 'RIFF' and data[8:12].decode == \"WAVE\":\r\n            fmt=struct.unpack(\"H\", data[20:22])[0]\r\n            start=44\r\n            if fmt != 1:\r\n                print(\"Data is not Liner PCM\")\r\n                return\r\n            rate=struct.unpack(\"I\", data[24:28])[0]\r\n            play_audio(data[start:], rate, self._volume)\r\n        else:\r\n            play_audio(data, rate, self._volume)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"voicevox"},"pyCode":"\n\"\"\"\nfile     Voicevox\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nfrom M5 import *\nimport sys\nimport requests2\nimport time\nfrom comm import Command, response200,response500\nimport json\nimport struct\nTXT=\"こんにちは\"\ndef play_audio(data, sample_rate=8000, volume=50):\n  Speaker.begin()\n  Speaker.setVolumePercentage(volume)\n  Speaker.playRaw(data, sample_rate)\n  while Speaker.isPlaying():\n    time.sleep_ms(100)\n  Speaker.end()\n  return\n\nclass Voicevox:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, host: str = '192.168.1.47', id: int = 1):\n        \"\"\"\n        label:\n            en: '%1 init, host: %2 , id: %3'\n        params:\n            host:\n                name: host\n                type: str\n                default: 192.168.1.47\n            id:\n                name: id\n                type: int\n                default: '1'\n        \"\"\"\n        self.header = {\"Content-Type\": \"application/json\"}\n        self.result_wav_file=\"audio.wav\"\n        self.query=\"\"\n        self.setUrl(host, id)\n        self.requesting=False\n        self._volume = 50\n\n    def setUrl(self, host = None, id: int = 1):\n        \"\"\"\n        label:\n            en: ' %1 setUrl, host: %2, id: %3'\n        params:\n            host:\n                name: host\n                default: None\n            id:\n                name: id\n                type: int\n                default: '1'\n        \"\"\"\n        if host: self.host=host\n        self.id=id\n        self.query_url=\"http://%s:50021/audio_query?speaker=%d\" % (self.host, self.id)\n        self.synth_url=\"http://%s:50021/synthesis?speaker=%d\" % (self.host, self.id)\n        return\n\n    def set_speaker(self, id: int = 1):\n        \"\"\"\n        label:\n            en: ' %1 set_speaker, id: %2'\n        params:\n            id:\n                name: id\n                type: int\n                default: '1'\n        \"\"\"\n        if isinstance(id, str):\n            self.id = int(id)\n        else:\n            self.id=id\n        return self.id\n\n    def request_tts(self, txt):\n        \"\"\"\n        label:\n            en: ' %1 request_tts, txt: %2'\n        params:\n            txt:\n                name: txt\n        \"\"\"\n        if self.requesting:\n            return False\n        #print(\"===\", txt)\n        self.requesting=True\n        encode_txt=[\"%%%X\" % x for x in txt.encode('utf-8')]\n        #print(txt, encode_txt)\n        res = requests2.post(self.query_url+\"&text=\"+\"\".join(encode_txt), headers=self.header)\n        self.query = b\"\"\n\n        if res.status_code == 200:\n            self.query=res.content\n            res = requests2.post(self.synth_url, data=self.query, headers=self.header)\n            if res.status_code == 200:\n                self.play_wav(res.content)\n                #rate=struct.unpack(\"I\", res.content[24:28])[0]\n                #Voice.play(res.content[44:], rate)\n            else:\n                print(\"Fail to synthesize\")\n                self.requesting=False\n                return False\n        else:\n            print(\"Fail to get query\")\n            self.requesting=False\n            return False\n        self.requesting=False\n        return True\n\n    def execute(self, txt):\n        \"\"\"\n        label:\n            en: ' %1 execute, txt: %2'\n        params:\n            txt:\n                name: txt\n        \"\"\"\n        if self.request_tts(txt):\n            return response200('application/json', json.dumps({\"result\": \"OK\"}))\n        else:\n            return response500()\n\n    def play_wav(self, data, rate: int = 8000):\n        \"\"\"\n        label:\n            en: ' %1 play_wav, data: %2, rate: %3'\n        params:\n            data:\n                name: data\n            rate:\n                name: rate\n                type: int\n                default: '8000'\n        \"\"\"\n        if data[:4].decode() == 'RIFF' and data[8:12].decode == \"WAVE\":\n            fmt=struct.unpack(\"H\", data[20:22])[0]\n            start=44\n            if fmt != 1:\n                print(\"Data is not Liner PCM\")\n                return\n            rate=struct.unpack(\"I\", data[24:28])[0]\n            play_audio(data[start:], rate, self._volume)\n        else:\n            play_audio(data, rate, self._volume)\n        return\n\n\n","version":"alpha2"}
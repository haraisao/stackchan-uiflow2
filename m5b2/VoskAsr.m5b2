{"category":"VoskAsr","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_VOSKASR_LANGUAGES = {\n  \"CUSTOM_VOSKASR_INIT\": {\n    \"en\": \"%1 init, host: %2 , language: %3\"\n  },\n  \"CUSTOM_VOSKASR_CALC_POWER\": {\n    \"en\": \" %1 calc_power, indata: %2\"\n  },\n  \"CUSTOM_VOSKASR_GET_SILENT_POWER\": {\n    \"en\": \" %1 get_silent_power, len: %2\"\n  },\n  \"CUSTOM_VOSKASR_RECORD_SILENCE\": {\n    \"en\": \" %1 record_silence, tm: %2\"\n  },\n  \"CUSTOM_VOSKASR_REQUEST_SPEECH_RECOG\": {\n    \"en\": \" %1 request_speech_recog, data: %2\"\n  },\n  \"CUSTOM_VOSKASR_RECORD_AUDIO\": {\n    \"en\": \" %1 record_audio, tm: %2, thr: %3\"\n  },\n  \"CUSTOM_VOSKASR_RECORD_AUDIO_TIME\": {\n    \"en\": \" %1 record_audio_time, tm: %2\"\n  },\n  \"CUSTOM_VOSKASR_DO_PROCESS\": {\n    \"en\": \" %1 do_process, max_seconds: %2, thr: %3\"\n  },\n  \"CUSTOM_VOSKASR_RUN\": {\n    \"en\": \" %1 run\"\n  },\n  \"CUSTOM_VOSKASR_EXECUTE\": {\n    \"en\": \" %1 execute, data: %2\"\n  }\n};\n\nconst initType = 'custom_voskasr_init';\nBlockly.BlockRegExpList['custom_voskasr'] = {\n  regexp: new RegExp(/^custom_voskasr_/),\n  code: \"from VoskAsr import VoskAsr\",\n  initBlockType: initType,\n  categoryId: 'custom_voskasr',\n}\nBlockly.utils.registerLanguages(CUSTOM_VOSKASR_LANGUAGES)\n\nBlockly.Msg.CUSTOM_VOSKASR_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_VOSKASR = 'VoskAsr'\n\nBlockly.utils.getcustom_voskasrOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['voskasr_0', 'voskasr_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_voskasr_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_voskasrOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'voskasr_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'host'\n        }, {\n          'type': 'input_value',\n          'name': 'language'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var host = Blockly.Python.valueToCode(block, 'host', Blockly.Python.ORDER_FUNCTION_CALL);\n  var language = Blockly.Python.valueToCode(block, 'language', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = VoskAsr(${host}, ${language})\\n`\n}\n\nBlockly.Blocks[\"custom_voskasr_calc_power\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_CALC_POWER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voskasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'indata'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_calc_power\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var indata = Blockly.Python.valueToCode(block, 'indata', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.calc_power(${indata})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voskasr_get_silent_power\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_GET_SILENT_POWER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voskasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'len'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_get_silent_power\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var len = Blockly.Python.valueToCode(block, 'len', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.get_silent_power(${len})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voskasr_record_silence\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_RECORD_SILENCE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voskasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tm'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_record_silence\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.record_silence(${tm})\\n`\n}\n\nBlockly.Blocks[\"custom_voskasr_request_speech_recog\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_REQUEST_SPEECH_RECOG,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voskasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_request_speech_recog\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.request_speech_recog(${data})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voskasr_record_audio\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_RECORD_AUDIO,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voskasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tm'\n        }, {\n          'type': 'input_value',\n          'name': 'thr'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_record_audio\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  var thr = Blockly.Python.valueToCode(block, 'thr', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.record_audio(${tm}, ${thr})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voskasr_record_audio_time\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_RECORD_AUDIO_TIME,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voskasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tm'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_record_audio_time\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.record_audio_time(${tm})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voskasr_do_process\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_DO_PROCESS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voskasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'max_seconds'\n        }, {\n          'type': 'input_value',\n          'name': 'thr'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_do_process\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var max_seconds = Blockly.Python.valueToCode(block, 'max_seconds', Blockly.Python.ORDER_FUNCTION_CALL);\n  var thr = Blockly.Python.valueToCode(block, 'thr', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.do_process(${max_seconds}, ${thr})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_voskasr_run\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_RUN,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voskasrOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_run\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.run()\\n`\n}\n\nBlockly.Blocks[\"custom_voskasr_execute\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_VOSKASR_EXECUTE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_voskasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_voskasr_execute\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.execute(${data})`, Blockly.Python.ORDER_NONE]\n}","toolbox":"\n<category name=\"VoskAsr\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_voskasr\">\n<title text=\"VoskAsr\" docsLink=\"\"></title>\n<block type=\"custom_voskasr_init\">\n  <value name=\"host\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">192.168.0.100</field>\n    </shadow>\n  </value>\n  <value name=\"language\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">ja-JP</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voskasr_calc_power\">\n  <value name=\"indata\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_voskasr_get_silent_power\">\n  <value name=\"len\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">10</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voskasr_record_silence\">\n  <value name=\"tm\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">5</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voskasr_request_speech_recog\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_voskasr_record_audio\">\n  <value name=\"tm\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">10</field>\n    </shadow>\n  </value>\n  <value name=\"thr\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">-1</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voskasr_record_audio_time\">\n  <value name=\"tm\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_voskasr_do_process\">\n  <value name=\"max_seconds\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">10</field>\n    </shadow>\n  </value>\n  <value name=\"thr\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">-1</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_voskasr_run\"/><block type=\"custom_voskasr_execute\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block>\n</category>\n","toolboxitemid":"custom_voskasr","block_type":["custom_voskasr___init__","custom_voskasr_calc_power","custom_voskasr_get_silent_power","custom_voskasr_record_silence","custom_voskasr_request_speech_recog","custom_voskasr_record_audio","custom_voskasr_record_audio_time","custom_voskasr_do_process","custom_voskasr_run","custom_voskasr_execute"]},"data":{"name":"VoskAsr","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"import sys, os\r\nfrom M5 import Mic\r\nimport time\r\nimport json\r\nimport binascii\r\nimport requests2\r\nimport math\r\nimport struct\r\nimport util\r\nfrom comm import Command\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init, host: %2 , language: %3"},"params":[{"name":"host","type":"str","default":"192.168.0.100","note":{},"field":""},{"name":"language","type":"str","default":"ja-JP","note":{},"field":""}],"return":"","source":"    self.host = host\r\n    self._endpoint = \"http://%s:8000/vosk\" % self.host\r\n    self._lang=language\r\n\r\n    self._buffer = b''\r\n    self._audio = b''\r\n    self.audio_segments = []\r\n\r\n    self._sample_width=2\r\n    self._frame_rate=8000\r\n    self._channels=1\r\n\r\n    self._prebuf= b''\r\n    self.silent_power=38\r\n    self.silence=bytearray(8000*5)\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"calc_power","note":{},"label":{"en":" %1 calc_power, indata: %2"},"params":[{"name":"indata","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    indata2 = struct.unpack(f\"{len(indata) / 2:.0f}h\", indata)\r\n    sqr_sum = sum([x*x for x in indata2])\r\n    rms = math.sqrt(sqr_sum/len(indata2))\r\n    power = 20 * math.log10(rms) if rms > 0.0 else -math.inf \r\n    return power\r","ast_return":{"code":"power","id":null},"doc_return":null},{"name":"get_silent_power","note":{},"label":{"en":" %1 get_silent_power, len: %2"},"params":[{"name":"len","type":"int","default":"10","note":{},"field":""}],"return":"","source":"    powers_=[]\r\n    count=0\r\n    for x in range(len):\r\n      val=self.calc_power(self.record_audio_time(2))\r\n      if val > 0:\r\n        powers_.append(val)\r\n        if count >= 5:\r\n          break\r\n    self.silent_power = sum(powers_)/count\r\n    print(self.silent_power)\r\n    return self.silent_power\r","ast_return":{"code":"self.silent_power","id":null},"doc_return":null},{"name":"record_silence","note":{},"label":{"en":" %1 record_silence, tm: %2"},"params":[{"name":"tm","type":"int","default":"5","note":{},"field":""}],"return":"","source":"    self.silence=self.record_audio_time(tm)\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"request_speech_recog","note":{},"label":{"en":" %1 request_speech_recog, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    url = self._endpoint\r\n    headers = {  'Content-Type' : 'application/json; charset=utf-8' }\r\n    audio_data = binascii.b2a_base64(data, newline=False)\r\n    request_data = audio_data.decode()\r\n    response = requests2.post(url, json=request_data, headers=headers)\r\n    return response.text\r","ast_return":{"code":"response.text","id":null},"doc_return":null},{"name":"record_audio","note":{},"label":{"en":" %1 record_audio, tm: %2, thr: %3"},"params":[{"name":"tm","type":"int","default":"10","note":{},"field":""},{"name":"thr","type":"int","default":"-1","note":{},"field":""}],"return":"","source":"      Mic.begin()\r\n      ds=0.5\r\n      tm0=time.time()+tm\r\n      res=b\"\"\r\n      flag=False\r\n      if thr < 0: thr = self.silent_power\r\n      while time.time() < tm0:\r\n        rec_data_ = bytearray(int(8000 * ds))\r\n        Mic.record(rec_data_, 8000, False)\r\n        while Mic.isRecording():\r\n          time.sleep_ms(100)\r\n        if self.calc_power(rec_data_) > thr:\r\n          flag=True\r\n          res +=rec_data_\r\n        elif flag:\r\n          #print(self.calc_power(rec_data_))\r\n          res += self.silence\r\n          Mic.end()\r\n          return res\r\n      Mic.end()\r\n      return res\r","ast_return":{"code":"res","id":null},"doc_return":null},{"name":"record_audio_time","note":{},"label":{"en":" %1 record_audio_time, tm: %2"},"params":[{"name":"tm","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    Mic.begin()\r\n    rec_data_ = bytearray(int(8000 * tm))\r\n    Mic.record(rec_data_, 8000, False)   \r\n    while Mic.isRecording():\r\n      time.sleep_ms(500)\r\n    Mic.end()\r\n    return rec_data_\r","ast_return":{"code":"rec_data_","id":null},"doc_return":null},{"name":"do_process","note":{},"label":{"en":" %1 do_process, max_seconds: %2, thr: %3"},"params":[{"name":"max_seconds","type":"int","default":"10","note":{},"field":""},{"name":"thr","type":"int","default":"-1","note":{},"field":""}],"return":"","source":"    data=self.record_audio(max_seconds, thr)\r\n    print(\"Reuqest ASR\")\r\n    if len(data) > 0:\r\n      res=self.request_speech_recog(data)\r\n      try:\r\n        print(\"RESPONSE:\", res)\r\n        return { 'result': res , 'error': ''}\r\n      except:\r\n        print(\"==== Fail\")\r\n        pass\r\n      return { 'result': '', 'error': 'Fail to recoginze' }\r\n    else:\r\n      print(\"==== No sound\")\r\n    return { 'result': '', 'error': 'No sound' }\r","ast_return":{"code":"{'result': '', 'error': 'No sound'}","id":null},"doc_return":null},{"name":"run","note":{},"label":{"en":" %1 run"},"params":[],"return":"","source":"    while True:\r\n      self.do_process()\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"execute","note":{},"label":{"en":" %1 execute, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    if isinstance(data, str):\r\n      try:\r\n        val = eval(data)\r\n        return self.do_process(*val)\r\n      except:\r\n        return { 'result': '', 'error': 'Invalid params' }\r\n    return False\r","ast_return":{"code":"False","id":null},"doc_return":null}],"python_file_name":"voskasr"},"pyCode":"\n\"\"\"\nfile     VoskAsr\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nimport sys, os\nfrom M5 import Mic\nimport time\nimport json\nimport binascii\nimport requests2\nimport math\nimport struct\nimport util\nfrom comm import Command\n\nclass VoskAsr:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, host: str = '192.168.0.100', language: str = 'ja-JP'):\n        \"\"\"\n        label:\n            en: '%1 init, host: %2 , language: %3'\n        params:\n            host:\n                name: host\n                type: str\n                default: 192.168.0.100\n            language:\n                name: language\n                type: str\n                default: ja-JP\n        \"\"\"\n    self.host = host\n    self._endpoint = \"http://%s:8000/vosk\" % self.host\n    self._lang=language\n\n    self._buffer = b''\n    self._audio = b''\n    self.audio_segments = []\n\n    self._sample_width=2\n    self._frame_rate=8000\n    self._channels=1\n\n    self._prebuf= b''\n    self.silent_power=38\n    self.silence=bytearray(8000*5)\n\n    def calc_power(self, indata):\n        \"\"\"\n        label:\n            en: ' %1 calc_power, indata: %2'\n        params:\n            indata:\n                name: indata\n        \"\"\"\n    indata2 = struct.unpack(f\"{len(indata) / 2:.0f}h\", indata)\n    sqr_sum = sum([x*x for x in indata2])\n    rms = math.sqrt(sqr_sum/len(indata2))\n    power = 20 * math.log10(rms) if rms > 0.0 else -math.inf \n    return power\n\n    def get_silent_power(self, len: int = 10):\n        \"\"\"\n        label:\n            en: ' %1 get_silent_power, len: %2'\n        params:\n            len:\n                name: len\n                type: int\n                default: '10'\n        \"\"\"\n    powers_=[]\n    count=0\n    for x in range(len):\n      val=self.calc_power(self.record_audio_time(2))\n      if val > 0:\n        powers_.append(val)\n        if count >= 5:\n          break\n    self.silent_power = sum(powers_)/count\n    print(self.silent_power)\n    return self.silent_power\n\n    def record_silence(self, tm: int = 5):\n        \"\"\"\n        label:\n            en: ' %1 record_silence, tm: %2'\n        params:\n            tm:\n                name: tm\n                type: int\n                default: '5'\n        \"\"\"\n    self.silence=self.record_audio_time(tm)\n    return\n\n    def request_speech_recog(self, data):\n        \"\"\"\n        label:\n            en: ' %1 request_speech_recog, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n    url = self._endpoint\n    headers = {  'Content-Type' : 'application/json; charset=utf-8' }\n    audio_data = binascii.b2a_base64(data, newline=False)\n    request_data = audio_data.decode()\n    response = requests2.post(url, json=request_data, headers=headers)\n    return response.text\n\n    def record_audio(self, tm: int = 10, thr: int = -1):\n        \"\"\"\n        label:\n            en: ' %1 record_audio, tm: %2, thr: %3'\n        params:\n            tm:\n                name: tm\n                type: int\n                default: '10'\n            thr:\n                name: thr\n                type: int\n                default: '-1'\n        \"\"\"\n      Mic.begin()\n      ds=0.5\n      tm0=time.time()+tm\n      res=b\"\"\n      flag=False\n      if thr < 0: thr = self.silent_power\n      while time.time() < tm0:\n        rec_data_ = bytearray(int(8000 * ds))\n        Mic.record(rec_data_, 8000, False)\n        while Mic.isRecording():\n          time.sleep_ms(100)\n        if self.calc_power(rec_data_) > thr:\n          flag=True\n          res +=rec_data_\n        elif flag:\n          #print(self.calc_power(rec_data_))\n          res += self.silence\n          Mic.end()\n          return res\n      Mic.end()\n      return res\n\n    def record_audio_time(self, tm):\n        \"\"\"\n        label:\n            en: ' %1 record_audio_time, tm: %2'\n        params:\n            tm:\n                name: tm\n        \"\"\"\n    Mic.begin()\n    rec_data_ = bytearray(int(8000 * tm))\n    Mic.record(rec_data_, 8000, False)   \n    while Mic.isRecording():\n      time.sleep_ms(500)\n    Mic.end()\n    return rec_data_\n\n    def do_process(self, max_seconds: int = 10, thr: int = -1):\n        \"\"\"\n        label:\n            en: ' %1 do_process, max_seconds: %2, thr: %3'\n        params:\n            max_seconds:\n                name: max_seconds\n                type: int\n                default: '10'\n            thr:\n                name: thr\n                type: int\n                default: '-1'\n        \"\"\"\n    data=self.record_audio(max_seconds, thr)\n    print(\"Reuqest ASR\")\n    if len(data) > 0:\n      res=self.request_speech_recog(data)\n      try:\n        print(\"RESPONSE:\", res)\n        return { 'result': res , 'error': ''}\n      except:\n        print(\"==== Fail\")\n        pass\n      return { 'result': '', 'error': 'Fail to recoginze' }\n    else:\n      print(\"==== No sound\")\n    return { 'result': '', 'error': 'No sound' }\n\n    def run(self):\n        \"\"\"\n        label:\n            en: ' %1 run'\n        \"\"\"\n    while True:\n      self.do_process()\n\n    def execute(self, data):\n        \"\"\"\n        label:\n            en: ' %1 execute, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n    if isinstance(data, str):\n      try:\n        val = eval(data)\n        return self.do_process(*val)\n      except:\n        return { 'result': '', 'error': 'Invalid params' }\n    return False\n\n\n","version":"alpha2"}
{"category":"MeloTts","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_MELOTTS_LANGUAGES = {\n  \"CUSTOM_MELOTTS_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_MELOTTS_TALK\": {\n    \"en\": \" %1 talk, text: %2, tm: %3\"\n  }\n};\n\nconst initType = 'custom_melotts_init';\nBlockly.BlockRegExpList['custom_melotts'] = {\n  regexp: new RegExp(/^custom_melotts_/),\n  code: \"from MeloTts import MeloTts\",\n  initBlockType: initType,\n  categoryId: 'custom_melotts',\n}\nBlockly.utils.registerLanguages(CUSTOM_MELOTTS_LANGUAGES)\n\nBlockly.Msg.CUSTOM_MELOTTS_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_MELOTTS = 'MeloTts'\n\nBlockly.utils.getcustom_melottsOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['melotts_0', 'melotts_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_melotts_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_MELOTTS_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_melottsOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'melotts_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_melotts_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = MeloTts()\\n`\n}\n\nBlockly.Blocks[\"custom_melotts_talk\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_MELOTTS_TALK,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_melottsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'text'\n        }, {\n          'type': 'input_value',\n          'name': 'tm'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_melotts_talk\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_FUNCTION_CALL);\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.talk(${text}, ${tm})\\n`\n}","toolbox":"\n<category name=\"MeloTts\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_melotts\">\n<title text=\"MeloTts\" docsLink=\"\"></title>\n<block type=\"custom_melotts_init\"/><block type=\"custom_melotts_talk\">\n  <value name=\"text\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"tm\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">10000</field>\n    </shadow>\n  </value>\n</block>\n</category>\n","toolboxitemid":"custom_melotts","block_type":["custom_melotts___init__","custom_melotts_talk"]},"data":{"name":"MeloTts","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"import os, sys, io\r\nimport M5\r\nfrom M5 import *\r\nfrom module import LlmModule\r\nimport time\r\nimport comm\r\nTTS=None\r\ndef init_tts():\r\n    global TTS\r\n    TTS=MeloTts()\r\n    return TTS\r\ndef talk(text, tm=3000):\r\n    global TTS\r\n    if TTS:\r\n        TTS.talk(text, tm)\r\n        return comm.response200('application/json', json.dumps({\"result\": \"OK\"}))\r\n    else:\r\n        print(\"No tts interface\")\r\n        return comm.response400()\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"return":"","source":"        self.llm = LlmModule(2, tx=17, rx=18)\r\n        while not (self.llm.check_connection()):\r\n            time.sleep(0.5)\r\n        self.llm.sys_reset(True)\r\n        self.llm.audio_setup(cap_volume=0.5, play_volume=0.15, request_id='audio_setup')\r\n        self.llm.melotts_setup(model='melotts-ja-jp', input='tts.utf-8.stream', enoutput=False, enkws='', request_id='melotts_setup')\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"talk","note":{},"label":{"en":" %1 talk, text: %2, tm: %3"},"params":[{"name":"text","type":null,"default":null,"note":{},"field":""},{"name":"tm","type":"int","default":"10000","note":{},"field":""}],"return":"","source":"        self.llm.melotts_inference(self.llm.get_latest_melotts_work_id(), text, tm, 'melotts_inference')\r","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"melotts"},"pyCode":"\n\"\"\"\nfile     MeloTts\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom module import LlmModule\nimport time\nimport comm\nTTS=None\ndef init_tts():\n    global TTS\n    TTS=MeloTts()\n    return TTS\ndef talk(text, tm=3000):\n    global TTS\n    if TTS:\n        TTS.talk(text, tm)\n        return comm.response200('application/json', json.dumps({\"result\": \"OK\"}))\n    else:\n        print(\"No tts interface\")\n        return comm.response400()\n\nclass MeloTts:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n        self.llm = LlmModule(2, tx=17, rx=18)\n        while not (self.llm.check_connection()):\n            time.sleep(0.5)\n        self.llm.sys_reset(True)\n        self.llm.audio_setup(cap_volume=0.5, play_volume=0.15, request_id='audio_setup')\n        self.llm.melotts_setup(model='melotts-ja-jp', input='tts.utf-8.stream', enoutput=False, enkws='', request_id='melotts_setup')\n\n    def talk(self, text, tm: int = 10000):\n        \"\"\"\n        label:\n            en: ' %1 talk, text: %2, tm: %3'\n        params:\n            text:\n                name: text\n            tm:\n                name: tm\n                type: int\n                default: '10000'\n        \"\"\"\n        self.llm.melotts_inference(self.llm.get_latest_melotts_work_id(), text, tm, 'melotts_inference')\n\n\n","version":"alpha2"}
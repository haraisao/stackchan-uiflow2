{"category":"Gtts","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_GTTS_LANGUAGES = {\n  \"CUSTOM_GTTS_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_GTTS_SETUP_UPD\": {\n    \"en\": \" %1 setup_upd, port: %2\"\n  },\n  \"CUSTOM_GTTS_TEXT2SPEECH\": {\n    \"en\": \" %1 text2speech, text: %2\"\n  },\n  \"CUSTOM_GTTS_SET_VOLUME\": {\n    \"en\": \" %1 set_volume, x: %2\"\n  },\n  \"CUSTOM_GTTS_SPEAK\": {\n    \"en\": \" %1 speak, data: %2\"\n  },\n  \"CUSTOM_GTTS_SET_SPEAKER\": {\n    \"en\": \" %1 set_speaker, data: %2\"\n  },\n  \"CUSTOM_GTTS_EXECUTE\": {\n    \"en\": \" %1 execute, data: %2\"\n  },\n  \"CUSTOM_GTTS_SET_REQUEST\": {\n    \"en\": \" %1 set_request, data: %2\"\n  },\n  \"CUSTOM_GTTS_CHECK_REQUEST\": {\n    \"en\": \" %1 check_request\"\n  },\n  \"CUSTOM_GTTS_UPDATE\": {\n    \"en\": \" %1 update\"\n  },\n  \"CUSTOM_GTTS_RESET\": {\n    \"en\": \" %1 reset\"\n  }\n};\n\nconst initType = 'custom_gtts_init';\nBlockly.BlockRegExpList['custom_gtts'] = {\n  regexp: new RegExp(/^custom_gtts_/),\n  code: \"from Gtts import Gtts\",\n  initBlockType: initType,\n  categoryId: 'custom_gtts',\n}\nBlockly.utils.registerLanguages(CUSTOM_GTTS_LANGUAGES)\n\nBlockly.Msg.CUSTOM_GTTS_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_GTTS = 'Gtts'\n\nBlockly.utils.getcustom_gttsOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['gtts_0', 'gtts_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_gtts_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_gttsOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'gtts_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = Gtts()\\n`\n}\n\nBlockly.Blocks[\"custom_gtts_setup_upd\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_SETUP_UPD,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'port'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_setup_upd\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var port = Blockly.Python.valueToCode(block, 'port', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.setup_upd(${port})\\n`\n}\n\nBlockly.Blocks[\"custom_gtts_text2speech\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_TEXT2SPEECH,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'text'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_text2speech\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.text2speech(${text})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_gtts_set_volume\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_SET_VOLUME,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'x'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_set_volume\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.set_volume(${x})\\n`\n}\n\nBlockly.Blocks[\"custom_gtts_speak\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_SPEAK,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_speak\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.speak(${data})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_gtts_set_speaker\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_SET_SPEAKER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_set_speaker\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.set_speaker(${data})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_gtts_execute\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_EXECUTE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_execute\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.execute(${data})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_gtts_set_request\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_SET_REQUEST,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_set_request\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.set_request(${data})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_gtts_check_request\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_CHECK_REQUEST,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_check_request\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.check_request()\\n`\n}\n\nBlockly.Blocks[\"custom_gtts_update\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_UPDATE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_update\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.update()\\n`\n}\n\nBlockly.Blocks[\"custom_gtts_reset\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GTTS_RESET,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gttsOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gtts_reset\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.reset()\\n`\n}","toolbox":"\n<category name=\"Gtts\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_gtts\">\n<title text=\"Gtts\" docsLink=\"\"></title>\n<block type=\"custom_gtts_init\"/><block type=\"custom_gtts_setup_upd\">\n  <value name=\"port\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">10800</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_gtts_text2speech\">\n  <value name=\"text\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_gtts_set_volume\">\n  <value name=\"x\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_gtts_speak\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_gtts_set_speaker\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_gtts_execute\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_gtts_set_request\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_gtts_check_request\"/><block type=\"custom_gtts_update\"/><block type=\"custom_gtts_reset\"/>\n</category>\n","toolboxitemid":"custom_gtts","block_type":["custom_gtts___init__","custom_gtts_setup_upd","custom_gtts_text2speech","custom_gtts_set_volume","custom_gtts_speak","custom_gtts_set_speaker","custom_gtts_execute","custom_gtts_set_request","custom_gtts_check_request","custom_gtts_update","custom_gtts_reset"]},"data":{"name":"Gtts","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"from M5 import *\r\nimport requests2\r\nimport binascii\r\nimport time\r\nimport socket\r\nimport select\r\nimport json\r\nfrom comm import Command\r\nimport util\r\n_EffectsProfile=('wearable', 'handset', 'headphone', 'small-bluetooth-speaker', 'medium-bluetooth-speaker', 'large-home-entertainment', 'large-automotive', 'telephony')\r\nJP_FEMAIL=['ja-JP-Chirp3-HD-Aoede', 'ja-JP-Chirp3-HD-Kore', 'ja-JP-Chirp3-HD-Leda', 'ja-JP-Chirp3-HD-Zephyr']\r\nJP_MALE=['ja-JP-Chirp3-HD-Charon', 'ja-JP-Chirp3-HD-Fenrir', 'ja-JP-Chirp3-HD-Orus', 'ja-JP-Chirp3-HD-Puck']\r\ndef set_volume(volume=50):\r\n    Speaker.begin()\r\n    Speaker.setVolumePercentage(volume)\r\n    Speaker.end()\r\ndef play_audio(data, sample_rate=8000, volume=50):\r\n    Speaker.begin()\r\n    Speaker.setVolumePercentage(volume)\r\n    Speaker.playRaw(data, sample_rate)\r\n    while Speaker.isPlaying():\r\n        time.sleep_ms(100)\r\n    Speaker.end()\r\n    return\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"return":"","source":"        self._endpoint = \"https://texttospeech.googleapis.com/v1/text:synthesize\"\r\n        self.conf = util.load_conf(\"/sd/apikey.txt\")\r\n        self._apikey = self.conf['OPENHRI_KEY']\r\n        self._lang = \"ja-JP\"\r\n        self._speekingRate = \"1.0\"\r\n        self._ssmlGender = \"FEMALE\"\r\n        self._voiceName = \"ja-JP-Wavenet-B\"\r\n        self._pitch = \"1.0\"\r\n        self._volumeGain = \"0\"\r\n        self._sampleRate = \"8000\"\r\n        self._effectsProfileId = None\r\n        self.udp=None\r\n        self.request = None\r\n        self.set_volume(50)\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"setup_upd","note":{},"label":{"en":" %1 setup_upd, port: %2"},"params":[{"name":"port","type":"int","default":"10800","note":{},"field":""}],"return":"","source":"        self.udp=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n        self.udp.bind((\"0.0.0.0\", port))\r\n        self.udp.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.poll = select.poll()\r\n        self.poll.register(self.udp, select.POLLIN)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"text2speech","note":{},"label":{"en":" %1 text2speech, text: %2"},"params":[{"name":"text","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        url = self._endpoint+\"?key=\"+self._apikey\r\n        headers = {  'Content-Type' : 'application/json; charset=utf-8' }\r\n        data = {\r\n                 \"input\": { \"text\" : text },\r\n                 \"voice\" : {\r\n                             'languageCode' : self._lang    # en-US, ja-JP, fr-FR\r\n                            , 'name' : self._voiceName\r\n                            , 'ssmlGender' : self._ssmlGender # MALE, FEMALE, NEUTRAL\r\n                       },\r\n                 'audioConfig': {\r\n                          'audioEncoding':'LINEAR16'  # LINEAR16, MP3, OGG_OPUS\r\n                          #'audioEncoding':'MP3'  # LINEAR16, MP3, OGG_OPUS\r\n                        , 'speakingRate' : self._speekingRate   # [0.25: 4.0]\r\n                        , 'pitch' : self._pitch         # [ -20.0: 20.0]\r\n                        , 'volumeGainDb' : self._volumeGain\r\n                        , 'sampleRateHertz' : self._sampleRate # default is 22050\r\n                      }\r\n            }\r\n        \r\n        if self._effectsProfileId in _EffectsProfile:\r\n            if self._effectsProfileId == 'telephony':\r\n                data['audioConfig']['effectsProfileId'] = 'telephony-class-application'\r\n            else:\r\n                data['audioConfig']['effectsProfileId'] = self._effectsProfileId + \"-class-device\"\r\n        print(\"---request\", data)\r\n        #response = requests2.post(url, json=data, headers=headers)\r\n        response = requests2.post(url, data=json.dumps(data), headers=headers)\r\n        return response\r","ast_return":{"code":"response","id":null},"doc_return":null},{"name":"set_volume","note":{},"label":{"en":" %1 set_volume, x: %2"},"params":[{"name":"x","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self._volume = x\r\n        set_volume(self._volume)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"speak","note":{},"label":{"en":" %1 speak, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        response=self.text2speech(data)\r\n        #print(response)\r\n        if response:\r\n            try:\r\n                result=response.json()\r\n                #print(result)\r\n                audio=binascii.a2b_base64(result['audioContent'])\r\n                if audio[:4] == b'RIFF':\r\n                    if audio[8:12] == b'WAVE':\r\n                        audio = audio[44:]\r\n                play_audio(audio, volume=self._volume)\r\n            except:\r\n                print(result)\r\n                return False\r\n            return True\r\n        return False\r","ast_return":{"code":"False","id":null},"doc_return":null},{"name":"set_speaker","note":{},"label":{"en":" %1 set_speaker, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self._voiceName = data\r\n        return True\r","ast_return":{"code":"True","id":null},"doc_return":null},{"name":"execute","note":{},"label":{"en":" %1 execute, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        print(\"start tts \", data)\r\n        return self.speak(data)\r","ast_return":{"code":"self.speak(data)","id":null},"doc_return":null},{"name":"set_request","note":{},"label":{"en":" %1 set_request, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self.request = data.encode('utf-8').decode('utf-8')\r\n        #self.request=\"こんにちは \"\r\n        return True\r","ast_return":{"code":"True","id":null},"doc_return":null},{"name":"check_request","note":{},"label":{"en":" %1 check_request"},"params":[],"return":"","source":"        if self.request:\r\n            self.speak(self.request)\r\n            self.request=None\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"update","note":{},"label":{"en":" %1 update"},"params":[],"return":"","source":"        if self.udp:\r\n            #if self.poll.poll(0.1)\r\n            recv_data = self.udp.recvfrom(1024)\r\n            self.execute(recv_data[0])\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"reset","note":{},"label":{"en":" %1 reset"},"params":[],"return":"","source":"        machine.reset()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"gtts"},"pyCode":"\n\"\"\"\nfile     Gtts\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nfrom M5 import *\nimport requests2\nimport binascii\nimport time\nimport socket\nimport select\nimport json\nfrom comm import Command\nimport util\n_EffectsProfile=('wearable', 'handset', 'headphone', 'small-bluetooth-speaker', 'medium-bluetooth-speaker', 'large-home-entertainment', 'large-automotive', 'telephony')\nJP_FEMAIL=['ja-JP-Chirp3-HD-Aoede', 'ja-JP-Chirp3-HD-Kore', 'ja-JP-Chirp3-HD-Leda', 'ja-JP-Chirp3-HD-Zephyr']\nJP_MALE=['ja-JP-Chirp3-HD-Charon', 'ja-JP-Chirp3-HD-Fenrir', 'ja-JP-Chirp3-HD-Orus', 'ja-JP-Chirp3-HD-Puck']\ndef set_volume(volume=50):\n    Speaker.begin()\n    Speaker.setVolumePercentage(volume)\n    Speaker.end()\ndef play_audio(data, sample_rate=8000, volume=50):\n    Speaker.begin()\n    Speaker.setVolumePercentage(volume)\n    Speaker.playRaw(data, sample_rate)\n    while Speaker.isPlaying():\n        time.sleep_ms(100)\n    Speaker.end()\n    return\n\nclass Gtts:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n        self._endpoint = \"https://texttospeech.googleapis.com/v1/text:synthesize\"\n        self.conf = util.load_conf(\"/sd/apikey.txt\")\n        self._apikey = self.conf['OPENHRI_KEY']\n        self._lang = \"ja-JP\"\n        self._speekingRate = \"1.0\"\n        self._ssmlGender = \"FEMALE\"\n        self._voiceName = \"ja-JP-Wavenet-B\"\n        self._pitch = \"1.0\"\n        self._volumeGain = \"0\"\n        self._sampleRate = \"8000\"\n        self._effectsProfileId = None\n        self.udp=None\n        self.request = None\n        self.set_volume(50)\n\n    def setup_upd(self, port: int = 10800):\n        \"\"\"\n        label:\n            en: ' %1 setup_upd, port: %2'\n        params:\n            port:\n                name: port\n                type: int\n                default: '10800'\n        \"\"\"\n        self.udp=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.udp.bind((\"0.0.0.0\", port))\n        self.udp.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.poll = select.poll()\n        self.poll.register(self.udp, select.POLLIN)\n        return\n\n    def text2speech(self, text):\n        \"\"\"\n        label:\n            en: ' %1 text2speech, text: %2'\n        params:\n            text:\n                name: text\n        \"\"\"\n        url = self._endpoint+\"?key=\"+self._apikey\n        headers = {  'Content-Type' : 'application/json; charset=utf-8' }\n        data = {\n                 \"input\": { \"text\" : text },\n                 \"voice\" : {\n                             'languageCode' : self._lang    # en-US, ja-JP, fr-FR\n                            , 'name' : self._voiceName\n                            , 'ssmlGender' : self._ssmlGender # MALE, FEMALE, NEUTRAL\n                       },\n                 'audioConfig': {\n                          'audioEncoding':'LINEAR16'  # LINEAR16, MP3, OGG_OPUS\n                          #'audioEncoding':'MP3'  # LINEAR16, MP3, OGG_OPUS\n                        , 'speakingRate' : self._speekingRate   # [0.25: 4.0]\n                        , 'pitch' : self._pitch         # [ -20.0: 20.0]\n                        , 'volumeGainDb' : self._volumeGain\n                        , 'sampleRateHertz' : self._sampleRate # default is 22050\n                      }\n            }\n        \n        if self._effectsProfileId in _EffectsProfile:\n            if self._effectsProfileId == 'telephony':\n                data['audioConfig']['effectsProfileId'] = 'telephony-class-application'\n            else:\n                data['audioConfig']['effectsProfileId'] = self._effectsProfileId + \"-class-device\"\n        print(\"---request\", data)\n        #response = requests2.post(url, json=data, headers=headers)\n        response = requests2.post(url, data=json.dumps(data), headers=headers)\n        return response\n\n    def set_volume(self, x):\n        \"\"\"\n        label:\n            en: ' %1 set_volume, x: %2'\n        params:\n            x:\n                name: x\n        \"\"\"\n        self._volume = x\n        set_volume(self._volume)\n        return\n\n    def speak(self, data):\n        \"\"\"\n        label:\n            en: ' %1 speak, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n        response=self.text2speech(data)\n        #print(response)\n        if response:\n            try:\n                result=response.json()\n                #print(result)\n                audio=binascii.a2b_base64(result['audioContent'])\n                if audio[:4] == b'RIFF':\n                    if audio[8:12] == b'WAVE':\n                        audio = audio[44:]\n                play_audio(audio, volume=self._volume)\n            except:\n                print(result)\n                return False\n            return True\n        return False\n\n    def set_speaker(self, data):\n        \"\"\"\n        label:\n            en: ' %1 set_speaker, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n        self._voiceName = data\n        return True\n\n    def execute(self, data):\n        \"\"\"\n        label:\n            en: ' %1 execute, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n        print(\"start tts \", data)\n        return self.speak(data)\n\n    def set_request(self, data):\n        \"\"\"\n        label:\n            en: ' %1 set_request, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n        self.request = data.encode('utf-8').decode('utf-8')\n        #self.request=\"こんにちは \"\n        return True\n\n    def check_request(self):\n        \"\"\"\n        label:\n            en: ' %1 check_request'\n        \"\"\"\n        if self.request:\n            self.speak(self.request)\n            self.request=None\n        return\n\n    def update(self):\n        \"\"\"\n        label:\n            en: ' %1 update'\n        \"\"\"\n        if self.udp:\n            #if self.poll.poll(0.1)\n            recv_data = self.udp.recvfrom(1024)\n            self.execute(recv_data[0])\n\n    def reset(self):\n        \"\"\"\n        label:\n            en: ' %1 reset'\n        \"\"\"\n        machine.reset()\n        return\n\n\n","version":"alpha2"}
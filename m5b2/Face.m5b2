{"category":"Face","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_FACE_LANGUAGES = {\n  \"CUSTOM_FACE_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_FACE_SET_CENTER\": {\n    \"en\": \" %1 set_center, x: %2, y: %3\"\n  },\n  \"CUSTOM_FACE_ROT_POS\": {\n    \"en\": \" %1 rot_pos, p: %2, angle: %3, center: %4\"\n  },\n  \"CUSTOM_FACE_CALLBACK_BLINK\": {\n    \"en\": \" %1 callback_blink, tm: %2\"\n  },\n  \"CUSTOM_FACE_START_BLINK\": {\n    \"en\": \" %1 start_blink\"\n  },\n  \"CUSTOM_FACE_STOP_BLINK\": {\n    \"en\": \" %1 stop_blink\"\n  },\n  \"CUSTOM_FACE_RANDOM_TYPE\": {\n    \"en\": \" %1 random_type\"\n  },\n  \"CUSTOM_FACE_START_MOTION\": {\n    \"en\": \" %1 start_motion, typ: %2, angle: %3, end: %4, count: %5\"\n  },\n  \"CUSTOM_FACE_CALLBACK_MOTION\": {\n    \"en\": \" %1 callback_motion, tm: %2\"\n  },\n  \"CUSTOM_FACE_DRAWEYE\": {\n    \"en\": \" %1 drawEye, param0: %2, r: %3, pos: %4, angle1: %5, angle2: %6, xpos: %7, eye_dist: %8\"\n  },\n  \"CUSTOM_FACE_DRAWMOUSE\": {\n    \"en\": \" %1 drawMouse, oRatio: %2, oRatio2: %3, angle: %4, pos: %5, mouse_flag: %6, xpos: %7, dw: %8\"\n  },\n  \"CUSTOM_FACE_FILLRECTROT\": {\n    \"en\": \" %1 fillRectRot, x: %2, y: %3, w: %4, h: %5, angle: %6, color: %7\"\n  },\n  \"CUSTOM_FACE_TALK\": {\n    \"en\": \" %1 talk, seq: %2, speed: %3\"\n  },\n  \"CUSTOM_FACE_SETFACETYPE\": {\n    \"en\": \" %1 setFaceType, n: %2\"\n  },\n  \"CUSTOM_FACE_DRAWFACE\": {\n    \"en\": \" %1 drawFace, idx: %2, angle: %3\"\n  },\n  \"CUSTOM_FACE_CLEAR\": {\n    \"en\": \" %1 clear\"\n  },\n  \"CUSTOM_FACE_SET_FACE_ID\": {\n    \"en\": \" %1 set_face_id, val: %2\"\n  },\n  \"CUSTOM_FACE_DRAW\": {\n    \"en\": \"draw %1 param0 %2 option %3\"\n  },\n  \"CUSTOM_FACE_FLUSH\": {\n    \"en\": \"flush %1\"\n  },\n  \"CUSTOM_FACE_PRINT_MESSAGE\": {\n    \"en\": \" %1 print_message, msg: %2\"\n  },\n  \"CUSTOM_FACE_PRINT_INFO\": {\n    \"en\": \" %1 print_info, msg: %2\"\n  },\n  \"CUSTOM_FACE_UPDATE\": {\n    \"en\": \" %1 update\"\n  }\n};\n\nconst initType = 'custom_face_init';\nBlockly.BlockRegExpList['custom_face'] = {\n  regexp: new RegExp(/^custom_face_/),\n  code: \"from Face import Face\",\n  initBlockType: initType,\n  categoryId: 'custom_face',\n}\nBlockly.utils.registerLanguages(CUSTOM_FACE_LANGUAGES)\n\nBlockly.Msg.CUSTOM_FACE_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_FACE = 'Face'\n\nBlockly.utils.getcustom_faceOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['face_0', 'face_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_face_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_faceOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'face_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = Face()\\n`\n}\n\nBlockly.Blocks[\"custom_face_set_center\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_SET_CENTER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'x'\n        }, {\n          'type': 'input_value',\n          'name': 'y'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_set_center\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_FUNCTION_CALL);\n  var y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.set_center(${x}, ${y})\\n`\n}\n\nBlockly.Blocks[\"custom_face_rot_pos\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_ROT_POS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'p'\n        }, {\n          'type': 'input_value',\n          'name': 'angle'\n        }, {\n          'type': 'input_value',\n          'name': 'center'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_rot_pos\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var p = Blockly.Python.valueToCode(block, 'p', Blockly.Python.ORDER_FUNCTION_CALL);\n  var angle = Blockly.Python.valueToCode(block, 'angle', Blockly.Python.ORDER_FUNCTION_CALL);\n  var center = Blockly.Python.valueToCode(block, 'center', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.rot_pos(${p}, ${angle}, ${center})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_face_callback_blink\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_CALLBACK_BLINK,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tm'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_callback_blink\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.callback_blink(${tm})\\n`\n}\n\nBlockly.Blocks[\"custom_face_start_blink\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_START_BLINK,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_start_blink\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.start_blink()\\n`\n}\n\nBlockly.Blocks[\"custom_face_stop_blink\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_STOP_BLINK,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_stop_blink\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.stop_blink()\\n`\n}\n\nBlockly.Blocks[\"custom_face_random_type\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_RANDOM_TYPE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_random_type\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.random_type()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_face_start_motion\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_START_MOTION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'typ'\n        }, {\n          'type': 'input_value',\n          'name': 'angle'\n        }, {\n          'type': 'input_value',\n          'name': 'end'\n        }, {\n          'type': 'input_value',\n          'name': 'count'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_start_motion\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var typ = Blockly.Python.valueToCode(block, 'typ', Blockly.Python.ORDER_FUNCTION_CALL);\n  var angle = Blockly.Python.valueToCode(block, 'angle', Blockly.Python.ORDER_FUNCTION_CALL);\n  var end = Blockly.Python.valueToCode(block, 'end', Blockly.Python.ORDER_FUNCTION_CALL);\n  var count = Blockly.Python.valueToCode(block, 'count', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.start_motion(${typ}, ${angle}, ${end}, ${count})\\n`\n}\n\nBlockly.Blocks[\"custom_face_callback_motion\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_CALLBACK_MOTION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tm'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_callback_motion\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.callback_motion(${tm})\\n`\n}\n\nBlockly.Blocks[\"custom_face_draweye\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_DRAWEYE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'param0'\n        }, {\n          'type': 'input_value',\n          'name': 'r'\n        }, {\n          'type': 'input_value',\n          'name': 'pos'\n        }, {\n          'type': 'input_value',\n          'name': 'angle1'\n        }, {\n          'type': 'input_value',\n          'name': 'angle2'\n        }, {\n          'type': 'input_value',\n          'name': 'xpos'\n        }, {\n          'type': 'input_value',\n          'name': 'eye_dist'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_draweye\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var param0 = Blockly.Python.valueToCode(block, 'param0', Blockly.Python.ORDER_FUNCTION_CALL);\n  var r = Blockly.Python.valueToCode(block, 'r', Blockly.Python.ORDER_FUNCTION_CALL);\n  var pos = Blockly.Python.valueToCode(block, 'pos', Blockly.Python.ORDER_FUNCTION_CALL);\n  var angle1 = Blockly.Python.valueToCode(block, 'angle1', Blockly.Python.ORDER_FUNCTION_CALL);\n  var angle2 = Blockly.Python.valueToCode(block, 'angle2', Blockly.Python.ORDER_FUNCTION_CALL);\n  var xpos = Blockly.Python.valueToCode(block, 'xpos', Blockly.Python.ORDER_FUNCTION_CALL);\n  var eye_dist = Blockly.Python.valueToCode(block, 'eye_dist', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.drawEye(${param0}, ${r}, ${pos}, ${angle1}, ${angle2}, ${xpos}, ${eye_dist})\\n`\n}\n\nBlockly.Blocks[\"custom_face_drawmouse\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_DRAWMOUSE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'oRatio'\n        }, {\n          'type': 'input_value',\n          'name': 'oRatio2'\n        }, {\n          'type': 'input_value',\n          'name': 'angle'\n        }, {\n          'type': 'input_value',\n          'name': 'pos'\n        }, {\n          'type': 'input_value',\n          'name': 'mouse_flag'\n        }, {\n          'type': 'input_value',\n          'name': 'xpos'\n        }, {\n          'type': 'input_value',\n          'name': 'dw'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_drawmouse\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var oRatio = Blockly.Python.valueToCode(block, 'oRatio', Blockly.Python.ORDER_FUNCTION_CALL);\n  var oRatio2 = Blockly.Python.valueToCode(block, 'oRatio2', Blockly.Python.ORDER_FUNCTION_CALL);\n  var angle = Blockly.Python.valueToCode(block, 'angle', Blockly.Python.ORDER_FUNCTION_CALL);\n  var pos = Blockly.Python.valueToCode(block, 'pos', Blockly.Python.ORDER_FUNCTION_CALL);\n  var mouse_flag = Blockly.Python.valueToCode(block, 'mouse_flag', Blockly.Python.ORDER_FUNCTION_CALL);\n  var xpos = Blockly.Python.valueToCode(block, 'xpos', Blockly.Python.ORDER_FUNCTION_CALL);\n  var dw = Blockly.Python.valueToCode(block, 'dw', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.drawMouse(${oRatio}, ${oRatio2}, ${angle}, ${pos}, ${mouse_flag}, ${xpos}, ${dw})\\n`\n}\n\nBlockly.Blocks[\"custom_face_fillrectrot\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_FILLRECTROT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'x'\n        }, {\n          'type': 'input_value',\n          'name': 'y'\n        }, {\n          'type': 'input_value',\n          'name': 'w'\n        }, {\n          'type': 'input_value',\n          'name': 'h'\n        }, {\n          'type': 'input_value',\n          'name': 'angle'\n        }, {\n          'type': 'input_value',\n          'name': 'color'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_fillrectrot\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_FUNCTION_CALL);\n  var y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_FUNCTION_CALL);\n  var w = Blockly.Python.valueToCode(block, 'w', Blockly.Python.ORDER_FUNCTION_CALL);\n  var h = Blockly.Python.valueToCode(block, 'h', Blockly.Python.ORDER_FUNCTION_CALL);\n  var angle = Blockly.Python.valueToCode(block, 'angle', Blockly.Python.ORDER_FUNCTION_CALL);\n  var color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.fillRectRot(${x}, ${y}, ${w}, ${h}, ${angle}, ${color})\\n`\n}\n\nBlockly.Blocks[\"custom_face_talk\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_TALK,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'seq'\n        }, {\n          'type': 'input_value',\n          'name': 'speed'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_talk\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var seq = Blockly.Python.valueToCode(block, 'seq', Blockly.Python.ORDER_FUNCTION_CALL);\n  var speed = Blockly.Python.valueToCode(block, 'speed', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.talk(${seq}, ${speed})\\n`\n}\n\nBlockly.Blocks[\"custom_face_setfacetype\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_SETFACETYPE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'n'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_setfacetype\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var n = Blockly.Python.valueToCode(block, 'n', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.setFaceType(${n})\\n`\n}\n\nBlockly.Blocks[\"custom_face_drawface\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_DRAWFACE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'idx'\n        }, {\n          'type': 'input_value',\n          'name': 'angle'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_drawface\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var idx = Blockly.Python.valueToCode(block, 'idx', Blockly.Python.ORDER_FUNCTION_CALL);\n  var angle = Blockly.Python.valueToCode(block, 'angle', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.drawFace(${idx}, ${angle})\\n`\n}\n\nBlockly.Blocks[\"custom_face_clear\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_CLEAR,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_clear\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.clear()\\n`\n}\n\nBlockly.Blocks[\"custom_face_set_face_id\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_SET_FACE_ID,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'val'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_set_face_id\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var val = Blockly.Python.valueToCode(block, 'val', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.set_face_id(${val})\\n`\n}\n\nBlockly.Blocks[\"custom_face_draw\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_DRAW,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'id'\n        }, {\n          'type': 'input_value',\n          'name': 'angle'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_draw\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var id = Blockly.Python.valueToCode(block, 'id', Blockly.Python.ORDER_FUNCTION_CALL);\n  var angle = Blockly.Python.valueToCode(block, 'angle', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.draw(${id}, ${angle})\\n`\n}\n\nBlockly.Blocks[\"custom_face_flush\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_FLUSH,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_flush\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.flush()\\n`\n}\n\nBlockly.Blocks[\"custom_face_print_message\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_PRINT_MESSAGE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'msg'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_print_message\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var msg = Blockly.Python.valueToCode(block, 'msg', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.print_message(${msg})\\n`\n}\n\nBlockly.Blocks[\"custom_face_print_info\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_PRINT_INFO,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'msg'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_print_info\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var msg = Blockly.Python.valueToCode(block, 'msg', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.print_info(${msg})\\n`\n}\n\nBlockly.Blocks[\"custom_face_update\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_FACE_UPDATE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_faceOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_face_update\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.update()\\n`\n}","toolbox":"\n<category name=\"Face\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_face\">\n<title text=\"Face\" docsLink=\"https://github.com/m5stack\"></title>\n<block type=\"custom_face_init\"/><block type=\"custom_face_set_center\">\n  <value name=\"x\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"y\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_rot_pos\">\n  <value name=\"p\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"angle\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"center\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">None</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_callback_blink\">\n  <value name=\"tm\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_start_blink\"/><block type=\"custom_face_stop_blink\"/><block type=\"custom_face_random_type\"/><block type=\"custom_face_start_motion\">\n  <value name=\"typ\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"angle\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"end\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1000</field>\n    </shadow>\n  </value>\n  <value name=\"count\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_callback_motion\">\n  <value name=\"tm\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_draweye\">\n  <value name=\"param0\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"r\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">8</field>\n    </shadow>\n  </value>\n  <value name=\"pos\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"angle1\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"angle2\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"xpos\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"eye_dist\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">70</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_drawmouse\">\n  <value name=\"oRatio\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"oRatio2\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"angle\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"pos\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"mouse_flag\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"xpos\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"dw\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_fillrectrot\">\n  <value name=\"x\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"y\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"w\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"h\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"angle\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"color\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">16777215</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_talk\">\n  <value name=\"seq\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"speed\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_setfacetype\">\n  <value name=\"n\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_drawface\">\n  <value name=\"idx\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">x</field>\n    </shadow>\n  </value>\n  <value name=\"angle\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_clear\"/><block type=\"custom_face_set_face_id\">\n  <value name=\"val\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_draw\">\n  <value name=\"id\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">x</field>\n    </shadow>\n  </value>\n  <value name=\"angle\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_flush\"/><block type=\"custom_face_print_message\">\n  <value name=\"msg\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_print_info\">\n  <value name=\"msg\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_face_update\"/>\n</category>\n","toolboxitemid":"custom_face","block_type":["custom_face___init__","custom_face_set_center","custom_face_rot_pos","custom_face_callback_blink","custom_face_start_blink","custom_face_stop_blink","custom_face_random_type","custom_face_start_motion","custom_face_callback_motion","custom_face_draweye","custom_face_drawmouse","custom_face_fillrectrot","custom_face_talk","custom_face_setfacetype","custom_face_drawface","custom_face_clear","custom_face_set_face_id","custom_face_draw","custom_face_flush","custom_face_print_message","custom_face_print_info","custom_face_update"]},"data":{"name":"Face","note":{"en":""},"details":{"color":"#0fb1d2","link":"https://github.com/m5stack","image":"","category":"Custom"},"header":{"file":"FaceClass","time":"2025-06-28","author":"","email":"","license":"MIT License"},"assignments":[],"example":"","source_internal":"","source_external":"from M5 import *\r\nimport M5\r\nimport random\r\nimport machine\r\nimport time\r\nimport math\r\nLEFT=0\r\nRIGHT=1\r\nDX=[70, 70, 69, 68, 66]\r\nDY=[0, 6, 12, 18, 24]\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"return":"","source":"        self.buffer=Display.newCanvas(320,240,16,True)\r\n        self.blink=-100\r\n        self.blink_start_flag=0\r\n        self.next_blink=80 + random.random()*40\r\n        self.top=0\r\n        self.center=[160,120-self.top]\r\n        self.eye_=[self.center[0],self.center[1]-20]\r\n        #self.eye_pos=[[self.center[0]-70, self.center[1]-20], [self.center[0]+70, self.center[1]-20]]\r\n        self.eye_dist=70\r\n        self.mouse_pos=[self.center[0],self.center[1]+28]\r\n        self.mouse_type={'x': [0,0], 'a':[0.8,0.5], 'i':[0.1,0.5],'u':[0.6,-0.5],'e':[0.2,0.8],'o':[0.4,-0.3],'n':[-0.1,0.7]}\r\n        self.face_type=0\r\n        self.mouse_flag=0\r\n        self.talk_intval=0.1\r\n        self.count=0\r\n        self.talk_timer=machine.Timer(0)\r\n        self.blink_timer=machine.Timer(1)\r\n        self.motions_all=['', 'look_r', 'look_l', 'look_u', 'look_d', 'wink_r', 'wink_l', 'anger', 'surprise', 'unhappy', 'smile']\r\n        self.motions=['', 'look_d','smile']\r\n        self.buffer.setFont(M5.Lcd.FONTS.DejaVu18)\r\n        #Widgets.FONTS.EFontJA24\r\n        self.current_face='normal'\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_center","note":{},"label":{"en":" %1 set_center, x: %2, y: %3"},"params":[{"name":"x","type":null,"default":null,"note":{},"field":""},{"name":"y","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self.center=[x,y]\r\n        self.eye_=[self.center[0],self.center[1]-20]\r\n        self.mouse_pos=[self.center[0],self.center[1]+28]\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"rot_pos","note":{},"label":{"en":" %1 rot_pos, p: %2, angle: %3, center: %4"},"params":[{"name":"p","type":null,"default":null,"note":{},"field":""},{"name":"angle","type":null,"default":null,"note":{},"field":""},{"name":"center","type":null,"default":"None","note":{},"field":""}],"return":"","source":"        if center is None: center=self.center\r\n        x=p[0] - center[0]\r\n        y=p[1] - center[1]\r\n        s1=math.sin(angle * math.pi/180.0)\r\n        c1=math.cos(angle * math.pi/180.0)\r\n        x2=int(x*c1 - y*s1)\r\n        y2=int(x*s1 + y*c1)\r\n        return x2+center[0], y2+center[1]\r","ast_return":{"code":"(x2 + center[0], y2 + center[1])","id":null},"doc_return":null},{"name":"callback_blink","note":{},"label":{"en":" %1 callback_blink, tm: %2"},"params":[{"name":"tm","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        if self.blink > 6:\r\n            self.blink_timer.deinit()\r\n            self.stop_blink()\r\n            return\r\n        self.blink += 1\r\n        self.drawFace()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"start_blink","note":{},"label":{"en":" %1 start_blink"},"params":[],"return":"","source":"        self.blink=0\r\n        self.blink_start_flag = -100\r\n        self.blink_timer.init(mode=machine.Timer.PERIODIC,period=30,callback=self.callback_blink)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"stop_blink","note":{},"label":{"en":" %1 stop_blink"},"params":[],"return":"","source":"        self.blink_start_flag=0\r\n        self.next_blink=80 + random.random()*40\r\n        self.blink=-100\r\n        self.drawFace()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"random_type","note":{},"label":{"en":" %1 random_type"},"params":[],"return":"","source":"        try:\r\n            idx=int(random.random() * len(self.motions))\r\n            return self.motions[idx]\r\n        except:\r\n            return \"\"\r","ast_return":{"code":"self.motions[idx]","id":null},"doc_return":null},{"name":"start_motion","note":{},"label":{"en":" %1 start_motion, typ: %2, angle: %3, end: %4, count: %5"},"params":[{"name":"typ","type":"str","default":"","note":{},"field":""},{"name":"angle","type":"int","default":"0","note":{},"field":""},{"name":"end","type":"int","default":"1000","note":{},"field":""},{"name":"count","type":"int","default":"1","note":{},"field":""}],"return":"","source":"        if not typ:\r\n            typ=self.random_type()\r\n        elif type(typ) is list:\r\n            self.motions=typ\r\n            typ=self.random_type()\r\n        if count > 0: self.count=count*2-1\r\n        self.draw(typ, angle=angle)\r\n        self.blink_timer.init(mode=machine.Timer.ONE_SHOT,period=end,callback=self.callback_motion)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"callback_motion","note":{},"label":{"en":" %1 callback_motion, tm: %2"},"params":[{"name":"tm","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        typs=[\"normal\", \"\"]\r\n        self.count -= 1\r\n        self.blink_timer.deinit()\r\n        if self.count >0:\r\n            typ=typs[self.count % 2]\r\n            end = 2000 + int((random.random()-0.5) * 500)\r\n            angle= int((random.random()-0.5) * 15)\r\n            self.start_motion(typ, angle=angle, end=end, count=0)\r\n        else:\r\n            self.draw()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"drawEye","note":{},"label":{"en":" %1 drawEye, param0: %2, r: %3, pos: %4, angle1: %5, angle2: %6, xpos: %7, eye_dist: %8"},"params":[{"name":"param0","type":"int","default":"0","note":{},"field":""},{"name":"r","type":"int","default":"8","note":{},"field":""},{"name":"pos","type":"int","default":"0","note":{},"field":""},{"name":"angle1","type":"int","default":"0","note":{},"field":""},{"name":"angle2","type":"int","default":"0","note":{},"field":""},{"name":"xpos","type":"int","default":"0","note":{},"field":""},{"name":"eye_dist","type":"int","default":"70","note":{},"field":""}],"return":"","source":"             angle1: int=0, angle2: int=0, xpos: int=0, eye_dist=70):\r\n        xl=self.eye_[0]- eye_dist + xpos\r\n        yl=self.eye_[1]- pos\r\n        xr=self.eye_[0]+ eye_dist + xpos\r\n        yr=self.eye_[1]- pos\r\n\r\n        xl, yl = self.rot_pos([xl, yl], angle1)\r\n        xr, yr = self.rot_pos([xr, yr], angle1)\r\n        l=r*2\r\n\r\n        if param0 == 1:   #  ^ ^\r\n            for i in range(3):\r\n              self.buffer.drawArc(xl, yl, r-1+i, r+i, 180+angle1, 360+angle1, 0xffffff)\r\n              self.buffer.drawArc(xr, yr, r-1+i, r+i, 180+angle1, 360+angle1, 0xffffff)\r\n\r\n        elif param0 == 2:  # o -\r\n            self.buffer.fillRect(xl-(r+l)//2, yl-r//2, r+l, r, 0xffffff)\r\n            self.buffer.fillCircle(xr, yr, r, 0xffffff)\r\n\r\n        elif param0 == 3:   # - o\r\n            self.buffer.fillRect(xr-(r+l)//2, yr-r//2, r+l, r, 0xffffff)\r\n            self.buffer.fillCircle(xl, yl, r, 0xffffff)\r\n\r\n        elif param0 == 4:  # - -\r\n            self.buffer.fillRect(xl-(r+l)//2, yl-r//2, r+l, r, 0xffffff)\r\n            self.buffer.fillRect(xr-(r+l)//2, yr-r//2, r+l, r, 0xffffff)\r\n\r\n        elif param0 == 5:  # + +\r\n            self.buffer.fillRect(xl-(r+l)//2, yl-r//2, r+l, r, 0xffffff)\r\n            self.buffer.fillRect(xl-r//2, yl-(r+l)//2, r, r+l, 0xffffff)\r\n            self.buffer.fillRect(xr-(r+l)//2, yr-r//2, r+l, r, 0xffffff)\r\n            self.buffer.fillRect(xr-r//2, yr-(r+l)//2, r, r+l, 0xffffff)\r\n\r\n        elif param0 == 6: # / \\ or \\ /\r\n            self.fillRectRot(xl-(r+l)//2, yl-r//2, r+l, r, -angle2, 0xffffff)\r\n            self.fillRectRot(xr-(r+l)//2, yr-r//2, r+l, r, angle2, 0xffffff)\r\n\r\n        else:  # o o\r\n            self.buffer.fillCircle(xl, yl, r, 0xffffff)\r\n            self.buffer.fillCircle(xr, yr, r, 0xffffff)\r\n            if self.blink > 0:\r\n                self.buffer.fillCircle(xl, yl-self.blink, r, 0)\r\n                self.buffer.fillCircle(xr, yr-self.blink, r, 0)\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"drawMouse","note":{},"label":{"en":" %1 drawMouse, oRatio: %2, oRatio2: %3, angle: %4, pos: %5, mouse_flag: %6, xpos: %7, dw: %8"},"params":[{"name":"oRatio","type":"int","default":"0","note":{},"field":""},{"name":"oRatio2","type":"int","default":"0","note":{},"field":""},{"name":"angle","type":"int","default":"0","note":{},"field":""},{"name":"pos","type":"int","default":"0","note":{},"field":""},{"name":"mouse_flag","type":"int","default":"0","note":{},"field":""},{"name":"xpos","type":"int","default":"0","note":{},"field":""},{"name":"dw","type":"int","default":"0","note":{},"field":""}],"return":"","source":"                 mouse_flag=0, xpos=0, dw=0):\r\n        if mouse_flag == 1 or mouse_flag == 'v':  # v\r\n            r=80\r\n            x=self.mouse_pos[0] + xpos\r\n            y=self.mouse_pos[1] - r -pos\r\n            x, y = self.rot_pos([x, y], angle)\r\n            for i in range(4):\r\n              self.buffer.drawArc(x, y, r+i, r+i+1, 70+angle, 110+angle, 0xffffff)\r\n\r\n        elif mouse_flag == 2 or mouse_flag == '^': # ^\r\n            r=80\r\n            x=self.mouse_pos[0] +xpos\r\n            y=self.mouse_pos[1] + r -pos\r\n            x, y = self.rot_pos([x, y], angle)\r\n            for i in range(4):\r\n              self.buffer.drawArc(x, y, r+i, r+i+1, 250+angle, 290+angle, 0xffffff)\r\n\r\n        elif mouse_flag == 3 or mouse_flag == 'o': # ^\r\n            x=self.mouse_pos[0] + xpos\r\n            y=self.mouse_pos[1] -pos\r\n            rx=10\r\n            ry=20\r\n            for i in range(4):\r\n              self.buffer.drawEllipse(x, y, rx+i, ry+i, 0xffffff)\r\n       \r\n        else:  # -\r\n            minWidth=50\r\n            maxWidth=90\r\n            minHeight=8\r\n            maxHeight=58\r\n            if oRatio2 == 0: oRatio2=oRatio\r\n            h = int(minHeight + (maxHeight - minHeight) * oRatio)\r\n            w = int(minWidth + (maxWidth - minWidth) * oRatio2) +dw\r\n            x=self.mouse_pos[0] - w // 2 + xpos\r\n            y=self.mouse_pos[1] - h // 2 - pos\r\n            if angle == 0:\r\n              self.buffer.fillRect(x, y, w, h, 0xffffff)\r\n            else:\r\n              for i in range(h):\r\n                x1, y1 = self.rot_pos([x, y+i], angle)\r\n                x2, y2 = self.rot_pos([x+w, y+i], angle)\r\n                self.buffer.drawLine(x1, y1, x2, y2, 0xffffff)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"fillRectRot","note":{},"label":{"en":" %1 fillRectRot, x: %2, y: %3, w: %4, h: %5, angle: %6, color: %7"},"params":[{"name":"x","type":null,"default":null,"note":{},"field":""},{"name":"y","type":null,"default":null,"note":{},"field":""},{"name":"w","type":null,"default":null,"note":{},"field":""},{"name":"h","type":null,"default":null,"note":{},"field":""},{"name":"angle","type":"int","default":"0","note":{},"field":""},{"name":"color","type":"int","default":"16777215","note":{},"field":""}],"return":"","source":"        center = [x+w//2, y+h//2]\r\n        for i in range(h):\r\n            x1, y1 = self.rot_pos([x, y+i], angle, center)\r\n            x2, y2 = self.rot_pos([x+w, y+i], angle, center)\r\n            self.buffer.drawLine(x1, y1, x2, y2, color)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"talk","note":{},"label":{"en":" %1 talk, seq: %2, speed: %3"},"params":[{"name":"seq","type":null,"default":null,"note":{},"field":""},{"name":"speed","type":"int","default":"0","note":{},"field":""}],"return":"","source":"        if not speed: speed=self.talk_intval\r\n        for x in seq:\r\n            if not x in self.mouse_type: continue\r\n            self.drawFace(x)\r\n            time.sleep(speed)\r\n            #self.drawFace('x')\r\n        self.drawFace('x')\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"setFaceType","note":{},"label":{"en":" %1 setFaceType, n: %2"},"params":[{"name":"n","type":"int","default":"0","note":{},"field":""}],"return":"","source":"        self.face_type=0\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"drawFace","note":{},"label":{"en":" %1 drawFace, idx: %2, angle: %3"},"params":[{"name":"idx","type":"str","default":"x","note":{},"field":""},{"name":"angle","type":"int","default":"0","note":{},"field":""}],"return":"","source":"        self.buffer.clear()\r\n        self.drawEye(self.face_type, angle1=angle)\r\n        self.drawMouse(*self.mouse_type[idx], angle=angle)\r\n        self.buffer.push(0,0)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"clear","note":{},"label":{"en":" %1 clear"},"params":[],"return":"","source":"        self.buffer.clear()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_face_id","note":{},"label":{"en":" %1 set_face_id, val: %2"},"params":[{"name":"val","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self.current_face = val\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"draw","note":{},"label":{"en":"draw %1 param0 %2 option %3"},"params":[{"name":"id","type":"str","default":"x","note":{},"field":""},{"name":"angle","type":"int","default":"0","note":{},"field":""}],"return":"","source":"        self.buffer.clear()\r\n\r\n        if id == 'talk':\r\n            try:\r\n                idx=list(self.mouse_type.keys())[round(random.random() * len(self.mouse_type))]\r\n            except:\r\n                idx='x'\r\n            self.drawFace(idx)\r\n\r\n        elif id == 'smile':\r\n            self.drawEye(1, angle1=angle)\r\n            self.drawMouse(mouse_flag='v', angle=angle)\r\n\r\n        elif id == 'anger':\r\n            self.drawEye(6, angle2=-10)\r\n            self.drawMouse(mouse_flag='^')\r\n\r\n        elif id == 'unhappy':\r\n            self.drawEye(6, angle2=10)\r\n            self.drawMouse(mouse_flag='^')\r\n\r\n        elif id == 'surprise':\r\n            self.drawEye(5)\r\n            self.drawMouse(mouse_flag='o')\r\n\r\n        elif id == 'wink_r':\r\n            self.drawEye(2)\r\n            self.drawMouse(angle=angle+5)\r\n\r\n        elif id == 'wink_l':\r\n            self.drawEye(3)\r\n            self.drawMouse(angle=angle-5)\r\n\r\n        elif id == 'look_l':\r\n            self.drawEye(xpos=-50, eye_dist=30, angle1=angle)\r\n            self.drawMouse(pos=-10, xpos=-40, dw=20, angle=angle)\r\n\r\n        elif id == 'look_r':\r\n            self.drawEye(xpos=50, eye_dist=30, angle1=angle)\r\n            self.drawMouse(pos=-10, xpos=40, dw=20,angle=angle)\r\n\r\n        elif id == 'look_u':\r\n            self.drawEye(pos=30, eye_dist=60, angle1=angle)\r\n            self.drawMouse(pos=20,dw=-10, angle=angle)\r\n\r\n        elif id == 'look_d':\r\n            self.drawEye(pos=-30, eye_dist=60, angle1=angle)\r\n            self.drawMouse(pos=-20,dw=-10,angle=angle)\r\n\r\n        else:\r\n            self.drawFace(angle=angle)\r\n            self.blink_start_flag += 1\r\n            if self.blink < 0 and self.blink_start_flag > self.next_blink:\r\n                self.start_blink()\r\n\r\n        self.flush()\r\n        pass\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"flush","note":{},"label":{"en":"flush %1"},"params":[],"return":"","source":"        self.buffer.push(0,self.top)\r\n        pass\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"print_message","note":{},"label":{"en":" %1 print_message, msg: %2"},"params":[{"name":"msg","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self.buffer.fillRect(0,0,320,20,0xffffff)\r\n        self.buffer.setCursor(0,2)\r\n        self.buffer.setTextColor(0, 0xffffff)\r\n        self.buffer.print(msg)\r\n        self.flush()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"print_info","note":{},"label":{"en":" %1 print_info, msg: %2"},"params":[{"name":"msg","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self.buffer.fillRect(0,222,320,20,0xffff00)\r\n        self.buffer.setCursor(0,222)\r\n        self.buffer.setTextColor(0, 0xffff00)\r\n        self.buffer.print(msg)\r\n        self.flush()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"update","note":{},"label":{"en":" %1 update"},"params":[],"return":"","source":"        self.draw(self.current_face)\r\n        return","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"face"},"pyCode":"\n\"\"\"\nfile     Face\ntime     2025-09-01\nauthor   \nemail   \nlicense  MIT License\n\"\"\"\n\nfrom M5 import *\nimport M5\nimport random\nimport machine\nimport time\nimport math\nLEFT=0\nRIGHT=1\nDX=[70, 70, 69, 68, 66]\nDY=[0, 6, 12, 18, 24]\n\nclass Face:\n    \"\"\"\n    note:\n        en: ''\n    details:\n        color: '#0fb1d2'\n        link: https://github.com/m5stack\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n        self.buffer=Display.newCanvas(320,240,16,True)\n        self.blink=-100\n        self.blink_start_flag=0\n        self.next_blink=80 + random.random()*40\n        self.top=0\n        self.center=[160,120-self.top]\n        self.eye_=[self.center[0],self.center[1]-20]\n        #self.eye_pos=[[self.center[0]-70, self.center[1]-20], [self.center[0]+70, self.center[1]-20]]\n        self.eye_dist=70\n        self.mouse_pos=[self.center[0],self.center[1]+28]\n        self.mouse_type={'x': [0,0], 'a':[0.8,0.5], 'i':[0.1,0.5],'u':[0.6,-0.5],'e':[0.2,0.8],'o':[0.4,-0.3],'n':[-0.1,0.7]}\n        self.face_type=0\n        self.mouse_flag=0\n        self.talk_intval=0.1\n        self.count=0\n        self.talk_timer=machine.Timer(0)\n        self.blink_timer=machine.Timer(1)\n        self.motions_all=['', 'look_r', 'look_l', 'look_u', 'look_d', 'wink_r', 'wink_l', 'anger', 'surprise', 'unhappy', 'smile']\n        self.motions=['', 'look_d','smile']\n        self.buffer.setFont(M5.Lcd.FONTS.DejaVu18)\n        #Widgets.FONTS.EFontJA24\n        self.current_face='normal'\n\n    def set_center(self, x, y):\n        \"\"\"\n        label:\n            en: ' %1 set_center, x: %2, y: %3'\n        params:\n            x:\n                name: x\n            y:\n                name: y\n        \"\"\"\n        self.center=[x,y]\n        self.eye_=[self.center[0],self.center[1]-20]\n        self.mouse_pos=[self.center[0],self.center[1]+28]\n        return\n\n    def rot_pos(self, p, angle, center = None):\n        \"\"\"\n        label:\n            en: ' %1 rot_pos, p: %2, angle: %3, center: %4'\n        params:\n            p:\n                name: p\n            angle:\n                name: angle\n            center:\n                name: center\n                default: None\n        \"\"\"\n        if center is None: center=self.center\n        x=p[0] - center[0]\n        y=p[1] - center[1]\n        s1=math.sin(angle * math.pi/180.0)\n        c1=math.cos(angle * math.pi/180.0)\n        x2=int(x*c1 - y*s1)\n        y2=int(x*s1 + y*c1)\n        return x2+center[0], y2+center[1]\n\n    def callback_blink(self, tm):\n        \"\"\"\n        label:\n            en: ' %1 callback_blink, tm: %2'\n        params:\n            tm:\n                name: tm\n        \"\"\"\n        if self.blink > 6:\n            self.blink_timer.deinit()\n            self.stop_blink()\n            return\n        self.blink += 1\n        self.drawFace()\n        return\n\n    def start_blink(self):\n        \"\"\"\n        label:\n            en: ' %1 start_blink'\n        \"\"\"\n        self.blink=0\n        self.blink_start_flag = -100\n        self.blink_timer.init(mode=machine.Timer.PERIODIC,period=30,callback=self.callback_blink)\n        return\n\n    def stop_blink(self):\n        \"\"\"\n        label:\n            en: ' %1 stop_blink'\n        \"\"\"\n        self.blink_start_flag=0\n        self.next_blink=80 + random.random()*40\n        self.blink=-100\n        self.drawFace()\n        return\n\n    def random_type(self):\n        \"\"\"\n        label:\n            en: ' %1 random_type'\n        \"\"\"\n        try:\n            idx=int(random.random() * len(self.motions))\n            return self.motions[idx]\n        except:\n            return \"\"\n\n    def start_motion(self, typ: str, angle: int = 0, end: int = 1000, count: int = 1):\n        \"\"\"\n        label:\n            en: ' %1 start_motion, typ: %2, angle: %3, end: %4, count: %5'\n        params:\n            typ:\n                name: typ\n                type: str\n            angle:\n                name: angle\n                type: int\n                default: '0'\n            end:\n                name: end\n                type: int\n                default: '1000'\n            count:\n                name: count\n                type: int\n                default: '1'\n        \"\"\"\n        if not typ:\n            typ=self.random_type()\n        elif type(typ) is list:\n            self.motions=typ\n            typ=self.random_type()\n        if count > 0: self.count=count*2-1\n        self.draw(typ, angle=angle)\n        self.blink_timer.init(mode=machine.Timer.ONE_SHOT,period=end,callback=self.callback_motion)\n        return\n\n    def callback_motion(self, tm):\n        \"\"\"\n        label:\n            en: ' %1 callback_motion, tm: %2'\n        params:\n            tm:\n                name: tm\n        \"\"\"\n        typs=[\"normal\", \"\"]\n        self.count -= 1\n        self.blink_timer.deinit()\n        if self.count >0:\n            typ=typs[self.count % 2]\n            end = 2000 + int((random.random()-0.5) * 500)\n            angle= int((random.random()-0.5) * 15)\n            self.start_motion(typ, angle=angle, end=end, count=0)\n        else:\n            self.draw()\n        return\n\n    def drawEye(self, param0: int = 0, r: int = 8, pos: int = 0, angle1: int = 0, angle2: int = 0, xpos: int = 0, eye_dist: int = 70):\n        \"\"\"\n        label:\n            en: ' %1 drawEye, param0: %2, r: %3, pos: %4, angle1: %5, angle2: %6, xpos: %7,\n                eye_dist: %8'\n        params:\n            param0:\n                name: param0\n                type: int\n                default: '0'\n            r:\n                name: r\n                type: int\n                default: '8'\n            pos:\n                name: pos\n                type: int\n                default: '0'\n            angle1:\n                name: angle1\n                type: int\n                default: '0'\n            angle2:\n                name: angle2\n                type: int\n                default: '0'\n            xpos:\n                name: xpos\n                type: int\n                default: '0'\n            eye_dist:\n                name: eye_dist\n                type: int\n                default: '70'\n        \"\"\"\n             angle1: int=0, angle2: int=0, xpos: int=0, eye_dist=70):\n        xl=self.eye_[0]- eye_dist + xpos\n        yl=self.eye_[1]- pos\n        xr=self.eye_[0]+ eye_dist + xpos\n        yr=self.eye_[1]- pos\n\n        xl, yl = self.rot_pos([xl, yl], angle1)\n        xr, yr = self.rot_pos([xr, yr], angle1)\n        l=r*2\n\n        if param0 == 1:   #  ^ ^\n            for i in range(3):\n              self.buffer.drawArc(xl, yl, r-1+i, r+i, 180+angle1, 360+angle1, 0xffffff)\n              self.buffer.drawArc(xr, yr, r-1+i, r+i, 180+angle1, 360+angle1, 0xffffff)\n\n        elif param0 == 2:  # o -\n            self.buffer.fillRect(xl-(r+l)//2, yl-r//2, r+l, r, 0xffffff)\n            self.buffer.fillCircle(xr, yr, r, 0xffffff)\n\n        elif param0 == 3:   # - o\n            self.buffer.fillRect(xr-(r+l)//2, yr-r//2, r+l, r, 0xffffff)\n            self.buffer.fillCircle(xl, yl, r, 0xffffff)\n\n        elif param0 == 4:  # - -\n            self.buffer.fillRect(xl-(r+l)//2, yl-r//2, r+l, r, 0xffffff)\n            self.buffer.fillRect(xr-(r+l)//2, yr-r//2, r+l, r, 0xffffff)\n\n        elif param0 == 5:  # + +\n            self.buffer.fillRect(xl-(r+l)//2, yl-r//2, r+l, r, 0xffffff)\n            self.buffer.fillRect(xl-r//2, yl-(r+l)//2, r, r+l, 0xffffff)\n            self.buffer.fillRect(xr-(r+l)//2, yr-r//2, r+l, r, 0xffffff)\n            self.buffer.fillRect(xr-r//2, yr-(r+l)//2, r, r+l, 0xffffff)\n\n        elif param0 == 6: # / \\ or \\ /\n            self.fillRectRot(xl-(r+l)//2, yl-r//2, r+l, r, -angle2, 0xffffff)\n            self.fillRectRot(xr-(r+l)//2, yr-r//2, r+l, r, angle2, 0xffffff)\n\n        else:  # o o\n            self.buffer.fillCircle(xl, yl, r, 0xffffff)\n            self.buffer.fillCircle(xr, yr, r, 0xffffff)\n            if self.blink > 0:\n                self.buffer.fillCircle(xl, yl-self.blink, r, 0)\n                self.buffer.fillCircle(xr, yr-self.blink, r, 0)\n\n    def drawMouse(self, oRatio: int = 0, oRatio2: int = 0, angle: int = 0, pos: int = 0, mouse_flag: int = 0, xpos: int = 0, dw: int = 0):\n        \"\"\"\n        label:\n            en: ' %1 drawMouse, oRatio: %2, oRatio2: %3, angle: %4, pos: %5, mouse_flag: %6,\n                xpos: %7, dw: %8'\n        params:\n            oRatio:\n                name: oRatio\n                type: int\n                default: '0'\n            oRatio2:\n                name: oRatio2\n                type: int\n                default: '0'\n            angle:\n                name: angle\n                type: int\n                default: '0'\n            pos:\n                name: pos\n                type: int\n                default: '0'\n            mouse_flag:\n                name: mouse_flag\n                type: int\n                default: '0'\n            xpos:\n                name: xpos\n                type: int\n                default: '0'\n            dw:\n                name: dw\n                type: int\n                default: '0'\n        \"\"\"\n                 mouse_flag=0, xpos=0, dw=0):\n        if mouse_flag == 1 or mouse_flag == 'v':  # v\n            r=80\n            x=self.mouse_pos[0] + xpos\n            y=self.mouse_pos[1] - r -pos\n            x, y = self.rot_pos([x, y], angle)\n            for i in range(4):\n              self.buffer.drawArc(x, y, r+i, r+i+1, 70+angle, 110+angle, 0xffffff)\n\n        elif mouse_flag == 2 or mouse_flag == '^': # ^\n            r=80\n            x=self.mouse_pos[0] +xpos\n            y=self.mouse_pos[1] + r -pos\n            x, y = self.rot_pos([x, y], angle)\n            for i in range(4):\n              self.buffer.drawArc(x, y, r+i, r+i+1, 250+angle, 290+angle, 0xffffff)\n\n        elif mouse_flag == 3 or mouse_flag == 'o': # ^\n            x=self.mouse_pos[0] + xpos\n            y=self.mouse_pos[1] -pos\n            rx=10\n            ry=20\n            for i in range(4):\n              self.buffer.drawEllipse(x, y, rx+i, ry+i, 0xffffff)\n       \n        else:  # -\n            minWidth=50\n            maxWidth=90\n            minHeight=8\n            maxHeight=58\n            if oRatio2 == 0: oRatio2=oRatio\n            h = int(minHeight + (maxHeight - minHeight) * oRatio)\n            w = int(minWidth + (maxWidth - minWidth) * oRatio2) +dw\n            x=self.mouse_pos[0] - w // 2 + xpos\n            y=self.mouse_pos[1] - h // 2 - pos\n            if angle == 0:\n              self.buffer.fillRect(x, y, w, h, 0xffffff)\n            else:\n              for i in range(h):\n                x1, y1 = self.rot_pos([x, y+i], angle)\n                x2, y2 = self.rot_pos([x+w, y+i], angle)\n                self.buffer.drawLine(x1, y1, x2, y2, 0xffffff)\n        return\n\n    def fillRectRot(self, x, y, w, h, angle: int = 0, color: int = 16777215):\n        \"\"\"\n        label:\n            en: ' %1 fillRectRot, x: %2, y: %3, w: %4, h: %5, angle: %6, color: %7'\n        params:\n            x:\n                name: x\n            y:\n                name: y\n            w:\n                name: w\n            h:\n                name: h\n            angle:\n                name: angle\n                type: int\n                default: '0'\n            color:\n                name: color\n                type: int\n                default: '16777215'\n        \"\"\"\n        center = [x+w//2, y+h//2]\n        for i in range(h):\n            x1, y1 = self.rot_pos([x, y+i], angle, center)\n            x2, y2 = self.rot_pos([x+w, y+i], angle, center)\n            self.buffer.drawLine(x1, y1, x2, y2, color)\n        return\n\n    def talk(self, seq, speed: int = 0):\n        \"\"\"\n        label:\n            en: ' %1 talk, seq: %2, speed: %3'\n        params:\n            seq:\n                name: seq\n            speed:\n                name: speed\n                type: int\n                default: '0'\n        \"\"\"\n        if not speed: speed=self.talk_intval\n        for x in seq:\n            if not x in self.mouse_type: continue\n            self.drawFace(x)\n            time.sleep(speed)\n            #self.drawFace('x')\n        self.drawFace('x')\n        return\n\n    def setFaceType(self, n: int = 0):\n        \"\"\"\n        label:\n            en: ' %1 setFaceType, n: %2'\n        params:\n            n:\n                name: n\n                type: int\n                default: '0'\n        \"\"\"\n        self.face_type=0\n        return\n\n    def drawFace(self, idx: str = 'x', angle: int = 0):\n        \"\"\"\n        label:\n            en: ' %1 drawFace, idx: %2, angle: %3'\n        params:\n            idx:\n                name: idx\n                type: str\n                default: x\n            angle:\n                name: angle\n                type: int\n                default: '0'\n        \"\"\"\n        self.buffer.clear()\n        self.drawEye(self.face_type, angle1=angle)\n        self.drawMouse(*self.mouse_type[idx], angle=angle)\n        self.buffer.push(0,0)\n        return\n\n    def clear(self):\n        \"\"\"\n        label:\n            en: ' %1 clear'\n        \"\"\"\n        self.buffer.clear()\n        return\n\n    def set_face_id(self, val):\n        \"\"\"\n        label:\n            en: ' %1 set_face_id, val: %2'\n        params:\n            val:\n                name: val\n        \"\"\"\n        self.current_face = val\n        return\n\n    def draw(self, id: str = 'x', angle: int = 0):\n        \"\"\"\n        label:\n            en: draw %1 param0 %2 option %3\n        params:\n            id:\n                name: id\n                type: str\n                default: x\n            angle:\n                name: angle\n                type: int\n                default: '0'\n        \"\"\"\n        self.buffer.clear()\n\n        if id == 'talk':\n            try:\n                idx=list(self.mouse_type.keys())[round(random.random() * len(self.mouse_type))]\n            except:\n                idx='x'\n            self.drawFace(idx)\n\n        elif id == 'smile':\n            self.drawEye(1, angle1=angle)\n            self.drawMouse(mouse_flag='v', angle=angle)\n\n        elif id == 'anger':\n            self.drawEye(6, angle2=-10)\n            self.drawMouse(mouse_flag='^')\n\n        elif id == 'unhappy':\n            self.drawEye(6, angle2=10)\n            self.drawMouse(mouse_flag='^')\n\n        elif id == 'surprise':\n            self.drawEye(5)\n            self.drawMouse(mouse_flag='o')\n\n        elif id == 'wink_r':\n            self.drawEye(2)\n            self.drawMouse(angle=angle+5)\n\n        elif id == 'wink_l':\n            self.drawEye(3)\n            self.drawMouse(angle=angle-5)\n\n        elif id == 'look_l':\n            self.drawEye(xpos=-50, eye_dist=30, angle1=angle)\n            self.drawMouse(pos=-10, xpos=-40, dw=20, angle=angle)\n\n        elif id == 'look_r':\n            self.drawEye(xpos=50, eye_dist=30, angle1=angle)\n            self.drawMouse(pos=-10, xpos=40, dw=20,angle=angle)\n\n        elif id == 'look_u':\n            self.drawEye(pos=30, eye_dist=60, angle1=angle)\n            self.drawMouse(pos=20,dw=-10, angle=angle)\n\n        elif id == 'look_d':\n            self.drawEye(pos=-30, eye_dist=60, angle1=angle)\n            self.drawMouse(pos=-20,dw=-10,angle=angle)\n\n        else:\n            self.drawFace(angle=angle)\n            self.blink_start_flag += 1\n            if self.blink < 0 and self.blink_start_flag > self.next_blink:\n                self.start_blink()\n\n        self.flush()\n        pass\n\n    def flush(self):\n        \"\"\"\n        label:\n            en: flush %1\n        \"\"\"\n        self.buffer.push(0,self.top)\n        pass\n\n    def print_message(self, msg):\n        \"\"\"\n        label:\n            en: ' %1 print_message, msg: %2'\n        params:\n            msg:\n                name: msg\n        \"\"\"\n        self.buffer.fillRect(0,0,320,20,0xffffff)\n        self.buffer.setCursor(0,2)\n        self.buffer.setTextColor(0, 0xffffff)\n        self.buffer.print(msg)\n        self.flush()\n        return\n\n    def print_info(self, msg):\n        \"\"\"\n        label:\n            en: ' %1 print_info, msg: %2'\n        params:\n            msg:\n                name: msg\n        \"\"\"\n        self.buffer.fillRect(0,222,320,20,0xffff00)\n        self.buffer.setCursor(0,222)\n        self.buffer.setTextColor(0, 0xffff00)\n        self.buffer.print(msg)\n        self.flush()\n        return\n\n    def update(self):\n        \"\"\"\n        label:\n            en: ' %1 update'\n        \"\"\"\n        self.draw(self.current_face)\n        return\n\n\n","version":"alpha2"}
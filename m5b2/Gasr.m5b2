{"category":"Gasr","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_GASR_LANGUAGES = {\n  \"CUSTOM_GASR_INIT\": {\n    \"en\": \"%1 init, node: %2 , language: %3\"\n  },\n  \"CUSTOM_GASR_CALC_POWER\": {\n    \"en\": \" %1 calc_power, indata: %2\"\n  },\n  \"CUSTOM_GASR_REQUEST_SPEECH_RECOG\": {\n    \"en\": \" %1 request_speech_recog, data: %2\"\n  },\n  \"CUSTOM_GASR_RECORD_AUDIO\": {\n    \"en\": \" %1 record_audio, tm: %2, thr: %3\"\n  },\n  \"CUSTOM_GASR_DO_PREOCESS\": {\n    \"en\": \" %1 do_preocess, max_seconds: %2, thr: %3\"\n  },\n  \"CUSTOM_GASR_EXECUTE\": {\n    \"en\": \" %1 execute, data: %2\"\n  }\n};\n\nconst initType = 'custom_gasr_init';\nBlockly.BlockRegExpList['custom_gasr'] = {\n  regexp: new RegExp(/^custom_gasr_/),\n  code: \"from Gasr import Gasr\",\n  initBlockType: initType,\n  categoryId: 'custom_gasr',\n}\nBlockly.utils.registerLanguages(CUSTOM_GASR_LANGUAGES)\n\nBlockly.Msg.CUSTOM_GASR_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_GASR = 'Gasr'\n\nBlockly.utils.getcustom_gasrOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['gasr_0', 'gasr_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_gasr_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GASR_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_gasrOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'gasr_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'node'\n        }, {\n          'type': 'input_value',\n          'name': 'language'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_gasr_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var node = Blockly.Python.valueToCode(block, 'node', Blockly.Python.ORDER_FUNCTION_CALL);\n  var language = Blockly.Python.valueToCode(block, 'language', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = Gasr(${node}, ${language})\\n`\n}\n\nBlockly.Blocks[\"custom_gasr_calc_power\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GASR_CALC_POWER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'indata'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gasr_calc_power\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var indata = Blockly.Python.valueToCode(block, 'indata', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.calc_power(${indata})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_gasr_request_speech_recog\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GASR_REQUEST_SPEECH_RECOG,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gasr_request_speech_recog\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.request_speech_recog(${data})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_gasr_record_audio\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GASR_RECORD_AUDIO,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tm'\n        }, {\n          'type': 'input_value',\n          'name': 'thr'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gasr_record_audio\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  var thr = Blockly.Python.valueToCode(block, 'thr', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.record_audio(${tm}, ${thr})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_gasr_do_preocess\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GASR_DO_PREOCESS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'max_seconds'\n        }, {\n          'type': 'input_value',\n          'name': 'thr'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gasr_do_preocess\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var max_seconds = Blockly.Python.valueToCode(block, 'max_seconds', Blockly.Python.ORDER_FUNCTION_CALL);\n  var thr = Blockly.Python.valueToCode(block, 'thr', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.do_preocess(${max_seconds}, ${thr})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_gasr_execute\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_GASR_EXECUTE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_gasrOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_gasr_execute\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.execute(${data})`, Blockly.Python.ORDER_NONE]\n}","toolbox":"\n<category name=\"Gasr\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_gasr\">\n<title text=\"Gasr\" docsLink=\"\"></title>\n<block type=\"custom_gasr_init\">\n  <value name=\"node\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">None</field>\n    </shadow>\n  </value>\n  <value name=\"language\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">ja-JP</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_gasr_calc_power\">\n  <value name=\"indata\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_gasr_request_speech_recog\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_gasr_record_audio\">\n  <value name=\"tm\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">10</field>\n    </shadow>\n  </value>\n  <value name=\"thr\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">38.5</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_gasr_do_preocess\">\n  <value name=\"max_seconds\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">10</field>\n    </shadow>\n  </value>\n  <value name=\"thr\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">38.5</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_gasr_execute\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block>\n</category>\n","toolboxitemid":"custom_gasr","block_type":["custom_gasr___init__","custom_gasr_calc_power","custom_gasr_request_speech_recog","custom_gasr_record_audio","custom_gasr_do_preocess","custom_gasr_execute"]},"data":{"name":"Gasr","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"import sys, os\nfrom M5 import Mic\nimport time\nimport json\nimport binascii\nimport requests2\nfrom comm import Command\nimport math\nimport struct\nimport util\ndef main():\n   recog = Gasr()\n   for n in range(5):\n     print(\"==== Start speech...\")\n     recog.speech_recognition()\nif __name__ == '__main__':\n  main()","members":[{"name":"__init__","note":{},"label":{"en":"%1 init, node: %2 , language: %3"},"params":[{"name":"node","type":null,"default":"None","note":{},"field":""},{"name":"language","type":"str","default":"ja-JP","note":{},"field":""}],"return":"","source":"    self._endpoint = 'https://speech.googleapis.com/v1/speech:recognize'\n    self.conf = util.load_conf(\"/sd/apikey.txt\")\n    self._apikey = self.conf['OPENHRI_KEY']\n\n    self._lang=language\n\n    self._buffer = b''\n    self._audio = b''\n    self.audio_segments = []\n\n    self._sample_width=2\n    self._frame_rate=8000\n    self._channels=1\n\n    self._prebuf= b''","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"calc_power","note":{},"label":{"en":" %1 calc_power, indata: %2"},"params":[{"name":"indata","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    indata2 = struct.unpack(f\"{len(indata) / 2:.0f}h\", indata)\n    sqr_sum = sum([x*x for x in indata2])\n    rms = math.sqrt(sqr_sum/len(indata2))\n    power = 20 * math.log10(rms) if rms > 0.0 else -math.inf \n    return power","ast_return":{"code":"power","id":null},"doc_return":null},{"name":"request_speech_recog","note":{},"label":{"en":" %1 request_speech_recog, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    url = self._endpoint+\"?key=\"+self._apikey\n    headers = {  'Content-Type' : 'application/json; charset=utf-8' }\n\n    audio_data = binascii.b2a_base64(data, newline=False)\n\n    request_data = {\n             \"config\" : { 'languageCode' : self._lang    # en-US, ja-JP, fr-FR\n                          , 'encoding' : 'LINEAR16'\n                          , 'sampleRateHertz' : self._frame_rate\n                          },\n             \"audio\"  : {\n                        'content' : audio_data.decode('utf-8')\n                          }\n            }\n\n    response = requests2.post(url, json=request_data, headers=headers)\n    return response.text","ast_return":{"code":"response.text","id":null},"doc_return":null},{"name":"record_audio","note":{},"label":{"en":" %1 record_audio, tm: %2, thr: %3"},"params":[{"name":"tm","type":"int","default":"10","note":{},"field":""},{"name":"thr","type":"float","default":"38.5","note":{},"field":""}],"return":"","source":"      Mic.begin()\n      ds=0.5\n      tm0=time.time()+tm\n      res=b\"\"\n      thr=34\n      flag=False\n      #print(time.time(), tm0)\n      while time.time() < tm0:\n        rec_data_ = bytearray(int(8000 * ds))\n        Mic.record(rec_data_, 8000, False)\n        while Mic.isRecording():\n          time.sleep_ms(100)\n        if self.calc_power(rec_data_) > thr:\n          flag=True\n          res +=rec_data_\n        elif flag:\n          print(self.calc_power(rec_data_))\n          Mic.end()\n          return res\n      Mic.end()\n      return res","ast_return":{"code":"res","id":null},"doc_return":null},{"name":"do_preocess","note":{},"label":{"en":" %1 do_preocess, max_seconds: %2, thr: %3"},"params":[{"name":"max_seconds","type":"int","default":"10","note":{},"field":""},{"name":"thr","type":"float","default":"38.5","note":{},"field":""}],"return":"","source":"    if not self._apikey :\n      print(\"No API key\")\n      return\n    data=self.record_audio(max_seconds, thr)\n    #print(\"Start\", time.time())\n    if len(data) > 0:\n      #self.save_wav(data)\n      res_=self.request_speech_recog(data)\n      response=json.loads(res_)\n      try:\n        res=response['results'][0]['alternatives'][0]['transcript']\n        print(\"RESPONSE:\", res)\n        return { 'result': res , 'error': ''}\n      except:\n        print(\"==== Fail\")\n        pass\n      return  { 'result': '', 'error': 'Fail to recoginze' }\n    else:\n      print(\"==== No sound\")\n    return  { 'result': '', 'error': 'No sound' }","ast_return":{"code":"{'result': '', 'error': 'No sound'}","id":null},"doc_return":null},{"name":"execute","note":{},"label":{"en":" %1 execute, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    if isinstance(data, str):\n      try:\n        val = eval(data)\n        return self.do_process(*val)\n      except:\n        return { 'result': '', 'error': 'Invalid params' }\n    return False","ast_return":{"code":"False","id":null},"doc_return":null}],"python_file_name":"gasr"},"pyCode":"\n\"\"\"\nfile     Gasr\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nimport sys, os\nfrom M5 import Mic\nimport time\nimport json\nimport binascii\nimport requests2\nfrom comm import Command\nimport math\nimport struct\nimport util\ndef main():\n   recog = Gasr()\n   for n in range(5):\n     print(\"==== Start speech...\")\n     recog.speech_recognition()\nif __name__ == '__main__':\n  main()\n\nclass Gasr:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, node = None, language: str = 'ja-JP'):\n        \"\"\"\n        label:\n            en: '%1 init, node: %2 , language: %3'\n        params:\n            node:\n                name: node\n                default: None\n            language:\n                name: language\n                type: str\n                default: ja-JP\n        \"\"\"\n    self._endpoint = 'https://speech.googleapis.com/v1/speech:recognize'\n    self.conf = util.load_conf(\"/sd/apikey.txt\")\n    self._apikey = self.conf['OPENHRI_KEY']\n\n    self._lang=language\n\n    self._buffer = b''\n    self._audio = b''\n    self.audio_segments = []\n\n    self._sample_width=2\n    self._frame_rate=8000\n    self._channels=1\n\n    self._prebuf= b''\n\n    def calc_power(self, indata):\n        \"\"\"\n        label:\n            en: ' %1 calc_power, indata: %2'\n        params:\n            indata:\n                name: indata\n        \"\"\"\n    indata2 = struct.unpack(f\"{len(indata) / 2:.0f}h\", indata)\n    sqr_sum = sum([x*x for x in indata2])\n    rms = math.sqrt(sqr_sum/len(indata2))\n    power = 20 * math.log10(rms) if rms > 0.0 else -math.inf \n    return power\n\n    def request_speech_recog(self, data):\n        \"\"\"\n        label:\n            en: ' %1 request_speech_recog, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n    url = self._endpoint+\"?key=\"+self._apikey\n    headers = {  'Content-Type' : 'application/json; charset=utf-8' }\n\n    audio_data = binascii.b2a_base64(data, newline=False)\n\n    request_data = {\n             \"config\" : { 'languageCode' : self._lang    # en-US, ja-JP, fr-FR\n                          , 'encoding' : 'LINEAR16'\n                          , 'sampleRateHertz' : self._frame_rate\n                          },\n             \"audio\"  : {\n                        'content' : audio_data.decode('utf-8')\n                          }\n            }\n\n    response = requests2.post(url, json=request_data, headers=headers)\n    return response.text\n\n    def record_audio(self, tm: int = 10, thr: float = 38.5):\n        \"\"\"\n        label:\n            en: ' %1 record_audio, tm: %2, thr: %3'\n        params:\n            tm:\n                name: tm\n                type: int\n                default: '10'\n            thr:\n                name: thr\n                type: float\n                default: '38.5'\n        \"\"\"\n      Mic.begin()\n      ds=0.5\n      tm0=time.time()+tm\n      res=b\"\"\n      thr=34\n      flag=False\n      #print(time.time(), tm0)\n      while time.time() < tm0:\n        rec_data_ = bytearray(int(8000 * ds))\n        Mic.record(rec_data_, 8000, False)\n        while Mic.isRecording():\n          time.sleep_ms(100)\n        if self.calc_power(rec_data_) > thr:\n          flag=True\n          res +=rec_data_\n        elif flag:\n          print(self.calc_power(rec_data_))\n          Mic.end()\n          return res\n      Mic.end()\n      return res\n\n    def do_preocess(self, max_seconds: int = 10, thr: float = 38.5):\n        \"\"\"\n        label:\n            en: ' %1 do_preocess, max_seconds: %2, thr: %3'\n        params:\n            max_seconds:\n                name: max_seconds\n                type: int\n                default: '10'\n            thr:\n                name: thr\n                type: float\n                default: '38.5'\n        \"\"\"\n    if not self._apikey :\n      print(\"No API key\")\n      return\n    data=self.record_audio(max_seconds, thr)\n    #print(\"Start\", time.time())\n    if len(data) > 0:\n      #self.save_wav(data)\n      res_=self.request_speech_recog(data)\n      response=json.loads(res_)\n      try:\n        res=response['results'][0]['alternatives'][0]['transcript']\n        print(\"RESPONSE:\", res)\n        return { 'result': res , 'error': ''}\n      except:\n        print(\"==== Fail\")\n        pass\n      return  { 'result': '', 'error': 'Fail to recoginze' }\n    else:\n      print(\"==== No sound\")\n    return  { 'result': '', 'error': 'No sound' }\n\n    def execute(self, data):\n        \"\"\"\n        label:\n            en: ' %1 execute, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n    if isinstance(data, str):\n      try:\n        val = eval(data)\n        return self.do_process(*val)\n      except:\n        return { 'result': '', 'error': 'Invalid params' }\n    return False\n\n\n","version":"alpha2"}
{"category":"WebServer","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_WEBSERVER_LANGUAGES = {\n  \"CUSTOM_WEBSERVER_INIT\": {\n    \"en\": \"%1 init, port: %2 , top: %3\"\n  },\n  \"CUSTOM_WEBSERVER_RENEW\": {\n    \"en\": \" %1 renew\"\n  },\n  \"CUSTOM_WEBSERVER_REGISTERCOMMAND\": {\n    \"en\": \" %1 registerCommand, name: %2, func: %3\"\n  },\n  \"CUSTOM_WEBSERVER_START\": {\n    \"en\": \" %1 start\"\n  },\n  \"CUSTOM_WEBSERVER_STOP\": {\n    \"en\": \" %1 stop\"\n  }\n};\n\nconst initType = 'custom_webserver_init';\nBlockly.BlockRegExpList['custom_webserver'] = {\n  regexp: new RegExp(/^custom_webserver_/),\n  code: \"from WebServer import WebServer\",\n  initBlockType: initType,\n  categoryId: 'custom_webserver',\n}\nBlockly.utils.registerLanguages(CUSTOM_WEBSERVER_LANGUAGES)\n\nBlockly.Msg.CUSTOM_WEBSERVER_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_WEBSERVER = 'WebServer'\n\nBlockly.utils.getcustom_webserverOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['webserver_0', 'webserver_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_webserver_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_WEBSERVER_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_webserverOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'webserver_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'port'\n        }, {\n          'type': 'input_value',\n          'name': 'top'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_webserver_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var port = Blockly.Python.valueToCode(block, 'port', Blockly.Python.ORDER_FUNCTION_CALL);\n  var top = Blockly.Python.valueToCode(block, 'top', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = WebServer(${port}, ${top})\\n`\n}\n\nBlockly.Blocks[\"custom_webserver_renew\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_WEBSERVER_RENEW,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_webserverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_webserver_renew\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.renew()\\n`\n}\n\nBlockly.Blocks[\"custom_webserver_registercommand\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_WEBSERVER_REGISTERCOMMAND,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_webserverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'name'\n        }, {\n          'type': 'input_value',\n          'name': 'func'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_webserver_registercommand\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var name = Blockly.Python.valueToCode(block, 'name', Blockly.Python.ORDER_FUNCTION_CALL);\n  var func = Blockly.Python.valueToCode(block, 'func', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.registerCommand(${name}, ${func})\\n`\n}\n\nBlockly.Blocks[\"custom_webserver_start\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_WEBSERVER_START,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_webserverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_webserver_start\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.start()\\n`\n}\n\nBlockly.Blocks[\"custom_webserver_stop\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_WEBSERVER_STOP,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_webserverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_webserver_stop\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.stop()\\n`\n}","toolbox":"\n<category name=\"WebServer\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_webserver\">\n<title text=\"WebServer\" docsLink=\"\"></title>\n<block type=\"custom_webserver_init\">\n  <value name=\"port\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">80</field>\n    </shadow>\n  </value>\n  <value name=\"top\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">/sd/html</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_webserver_renew\"/><block type=\"custom_webserver_registercommand\">\n  <value name=\"name\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"func\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_webserver_start\"/><block type=\"custom_webserver_stop\"/>\n</category>\n","toolboxitemid":"custom_webserver","block_type":["custom_webserver___init__","custom_webserver_renew","custom_webserver_registercommand","custom_webserver_start","custom_webserver_stop"]},"data":{"name":"WebServer","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"from M5 import *\r\nimport machine\r\nimport time\r\nimport comm\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init, port: %2 , top: %3"},"params":[{"name":"port","type":"int","default":"80","note":{},"field":""},{"name":"top","type":"str","default":"/sd/html","note":{},"field":""}],"return":"","source":"    if type(port) == str: port = int(port)\r\n    self.port = port\r\n    self.reader = comm.HttpReader(top)\r\n    self.server=comm.SocketServer(self.reader, \"Web\", \"\", port)\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"renew","note":{},"label":{"en":" %1 renew"},"params":[],"return":"","source":"    self.server.stop()\r\n    self.server=comm.SocketServer(self.reader, \"Web\", \"\", self.port)\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"registerCommand","note":{},"label":{"en":" %1 registerCommand, name: %2, func: %3"},"params":[{"name":"name","type":null,"default":null,"note":{},"field":""},{"name":"func","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    if type(func) is str:\r\n      try:\r\n        func = eval(func)\r\n        print(func)\r\n      except:\r\n        print(\"ERROR to register:\", func)\r\n        return\r\n\r\n    self.server.reader.registerCommand(name, func)\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"start","note":{},"label":{"en":" %1 start"},"params":[],"return":"","source":"    self.server.start()\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"stop","note":{},"label":{"en":" %1 stop"},"params":[],"return":"","source":"    try:\r\n      self.server.terminate()\r\n    except:\r\n      pass\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"webserver"},"pyCode":"\n\"\"\"\nfile     WebServer\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nfrom M5 import *\nimport machine\nimport time\nimport comm\n\nclass WebServer:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, port: int = 80, top: str = '/sd/html'):\n        \"\"\"\n        label:\n            en: '%1 init, port: %2 , top: %3'\n        params:\n            port:\n                name: port\n                type: int\n                default: '80'\n            top:\n                name: top\n                type: str\n                default: /sd/html\n        \"\"\"\n    if type(port) == str: port = int(port)\n    self.port = port\n    self.reader = comm.HttpReader(top)\n    self.server=comm.SocketServer(self.reader, \"Web\", \"\", port)\n\n    def renew(self):\n        \"\"\"\n        label:\n            en: ' %1 renew'\n        \"\"\"\n    self.server.stop()\n    self.server=comm.SocketServer(self.reader, \"Web\", \"\", self.port)\n    return\n\n    def registerCommand(self, name, func):\n        \"\"\"\n        label:\n            en: ' %1 registerCommand, name: %2, func: %3'\n        params:\n            name:\n                name: name\n            func:\n                name: func\n        \"\"\"\n    if type(func) is str:\n      try:\n        func = eval(func)\n        print(func)\n      except:\n        print(\"ERROR to register:\", func)\n        return\n\n    self.server.reader.registerCommand(name, func)\n    return\n\n    def start(self):\n        \"\"\"\n        label:\n            en: ' %1 start'\n        \"\"\"\n    self.server.start()\n    return\n\n    def stop(self):\n        \"\"\"\n        label:\n            en: ' %1 stop'\n        \"\"\"\n    try:\n      self.server.terminate()\n    except:\n      pass\n    return\n\n\n","version":"alpha2"}
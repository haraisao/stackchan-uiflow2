{"category":"StackChan","color":"#f55d5b","uiflow2":{"jscode":"const CUSTOM_STACKCHAN_LANGUAGES = {\n  \"CUSTOM_STACKCHAN_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_STACKCHAN_INIT_WEB\": {\n    \"en\": \"%1 init_web port_no: %2\"\n  },\n  \"CUSTOM_STACKCHAN_START_WEB_SERVER\": {\n    \"en\": \" %1 start_web_server\"\n  },\n  \"CUSTOM_STACKCHAN_SET_MOTOR\": {\n    \"en\": \" %1 set_motor\"\n  },\n  \"CUSTOM_STACKCHAN_SET_TTS\": {\n    \"en\": \" %1 set_tts\"\n  },\n  \"CUSTOM_STACKCHAN_SET_ASR\": {\n    \"en\": \" %1 set_asr\"\n  },\n  \"CUSTOM_STACKCHAN_CONNECT_WLAN\": {\n    \"en\": \"%1 connect_wlan trial: %2\"\n  },\n  \"CUSTOM_STACKCHAN_ISCONNECTED_WLAN\": {\n    \"en\": \" %1 isconnected_wlan\"\n  },\n  \"CUSTOM_STACKCHAN_SET_TORQUE\": {\n    \"en\": \"%1 set_torque flag: %2\"\n  },\n  \"CUSTOM_STACKCHAN_STOP\": {\n    \"en\": \" %1 stop\"\n  },\n  \"CUSTOM_STACKCHAN_SET_GOAL_POSITION\": {\n    \"en\": \"%1 set_goal_position pose: %2\"\n  },\n  \"CUSTOM_STACKCHAN_DO_ASR_PROCESS\": {\n    \"en\": \" %1 do_asr_process\"\n  },\n  \"CUSTOM_STACKCHAN_MOVE\": {\n    \"en\": \"%1 move h_deg: %2  t_deg: %3\"\n  },\n  \"CUSTOM_STACKCHAN_UPDATE\": {\n    \"en\": \" %1 update\"\n  }\n};\n\nconst initType = 'custom_stackchan_init';\nBlockly.BlockRegExpList['custom_stackchan'] = {\n  regexp: new RegExp(/^custom_stackchan_/),\n  code: \"from StackChan import StackChan\",\n  initBlockType: initType,\n  categoryId: 'custom_stackchan',\n}\nBlockly.utils.registerLanguages(CUSTOM_STACKCHAN_LANGUAGES)\n\nBlockly.Msg.CUSTOM_STACKCHAN_HUE = '#f55d5b'\nBlockly.Msg.CUSTOM_STACKCHAN = 'StackChan'\n\nBlockly.utils.getcustom_stackchanOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['stackchan_0', 'stackchan_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_stackchan_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_stackchanOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'stackchan_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = StackChan()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_init_web\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_INIT_WEB,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'n'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_init_web\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var n = Blockly.Python.valueToCode(block, 'n', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.init_web(${n})\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_start_web_server\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_START_WEB_SERVER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_start_web_server\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.start_web_server()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_set_motor\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_MOTOR,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_motor\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.set_motor()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_set_tts\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_TTS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_tts\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.set_tts()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_set_asr\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_ASR,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_asr\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.set_asr()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_connect_wlan\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_CONNECT_WLAN,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'trial'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_connect_wlan\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var trial = Blockly.Python.valueToCode(block, 'trial', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.connect_wlan(${trial})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_stackchan_isconnected_wlan\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_ISCONNECTED_WLAN,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_isconnected_wlan\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.isconnected_wlan()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_stackchan_set_torque\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_TORQUE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          \"type\": \"field_switch\",\n          \"name\": \"val\",\n          \"options\": [\n            ['True', 'True'],\n            ['False', 'False']\n          ],\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_torque\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var val = block.getFieldValue('val');\n  return [`${varname}.set_torque(${val})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_stackchan_stop\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_STOP,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_stop\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.stop()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_set_goal_position\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_GOAL_POSITION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'pose'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_goal_position\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var pose = Blockly.Python.valueToCode(block, 'pose', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.set_goal_position(${pose})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_stackchan_do_asr_process\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_DO_ASR_PROCESS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_do_asr_process\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.do_asr_process()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_move\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_MOVE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'h_deg'\n        }, {\n          'type': 'input_value',\n          'name': 't_deg'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_move\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var h_deg = Blockly.Python.valueToCode(block, 'h_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  var t_deg = Blockly.Python.valueToCode(block, 't_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.move(${h_deg}, ${t_deg})\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_update\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_UPDATE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#f55d5b\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_update\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.update()\\n`\n}","toolbox":"\n<category name=\"StackChan\" colour=\"#f55d5b\" hidden=\"true\" toolboxitemid=\"custom_stackchan\">\n<title text=\"StackChan\" docsLink=\"\"></title>\n<block type=\"custom_stackchan_init\"/><block type=\"custom_stackchan_init_web\">\n  <value name=\"n\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">80</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_stackchan_start_web_server\"/><block type=\"custom_stackchan_set_motor\"/><block type=\"custom_stackchan_set_tts\"/><block type=\"custom_stackchan_set_asr\"/><block type=\"custom_stackchan_connect_wlan\">\n  <value name=\"trial\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">5</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_stackchan_isconnected_wlan\"/><block type=\"custom_stackchan_set_torque\">\n  <field name=\"val\">True</field>\n</block><block type=\"custom_stackchan_stop\"/><block type=\"custom_stackchan_set_goal_position\">\n  <value name=\"pose\">\n    <block type=\"lists_create_with\">\n      <mutation items=\"2\"/>\n      <value name=\"ADD0\">\n        <block type=\"math_number\">\n          <field name=\"NUM\">0</field>\n        </block>\n      </value>\n      <value name=\"ADD1\">\n        <block type=\"math_number\">\n          <field name=\"NUM\">0</field>\n        </block>\n      </value>\n    </block>\n  </value>\n</block><block type=\"custom_stackchan_do_asr_process\"/><block type=\"custom_stackchan_move\">\n  <value name=\"h_deg\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"t_deg\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_stackchan_update\"/>\n</category>\n","toolboxitemid":"custom_stackchan","block_type":["custom_stackchan___init__","custom_stackchan_init_web","custom_stackchan_start_web_server","custom_stackchan_set_motor","custom_stackchan_set_tts","custom_stackchan_set_asr","custom_stackchan_connect_wlan","custom_stackchan_isconnected_wlan","custom_stackchan_set_torque","custom_stackchan_stop","custom_stackchan_set_goal_position","custom_stackchan_do_asr_process","custom_stackchan_move","custom_stackchan_update"]},"data":{"name":"StackChan","note":{"en":""},"details":{"color":"#f55d5b","link":"","image":"","category":"Custom"},"header":{"file":"StackChan","time":"2025-09-02","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"return":"","source":"","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"init_web","note":{},"label":{"en":"%1 init_web port_no: %2"},"params":[{"name":"n","type":"int","default":"80","note":{},"field":""}],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"start_web_server","note":{},"label":{"en":" %1 start_web_server"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_motor","note":{},"label":{"en":" %1 set_motor"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_tts","note":{},"label":{"en":" %1 set_tts"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_asr","note":{},"label":{"en":" %1 set_asr"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"connect_wlan","note":{},"label":{"en":"%1 connect_wlan trial: %2"},"params":[{"name":"trial","type":"int","default":"5","note":{},"field":"number","max":"100","min":"0"}],"return":"","source":"        return None","ast_return":{"code":"None","id":null},"doc_return":null},{"name":"isconnected_wlan","note":{},"label":{"en":" %1 isconnected_wlan"},"params":[],"return":"","source":"        return False","ast_return":{"code":"False","id":null},"doc_return":null},{"name":"set_torque","note":{},"label":{"en":"%1 set_torque flag: %2"},"params":[{"name":"val","type":"bool","default":"True","note":{},"field":"switch"}],"return":"","source":"        return True","ast_return":{"code":"True","id":null},"doc_return":null},{"name":"stop","note":{},"label":{"en":" %1 stop"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_goal_position","note":{},"label":{"en":"%1 set_goal_position pose: %2"},"params":[{"name":"pose","type":"list","default":"[0, 0]","note":{},"field":""}],"return":"","source":"        return False","ast_return":{"code":"False","id":null},"doc_return":null},{"name":"do_asr_process","note":{},"label":{"en":" %1 do_asr_process"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"move","note":{},"label":{"en":"%1 move h_deg: %2  t_deg: %3"},"params":[{"name":"h_deg","type":"int","default":"0","note":{},"field":"number","max":"100","min":"0"},{"name":"t_deg","type":"int","default":"0","note":{},"field":"number","max":"100","min":"0"}],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"update","note":{},"label":{"en":" %1 update"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"stackchan"},"pyCode":"\n\"\"\"\nfile     StackChan\ntime     2025-09-02\nauthor   \nemail   \nlicense  \n\"\"\"\n\n\n\nclass StackChan:\n    \"\"\"\n    note:\n        en: ''\n    details:\n        color: '#f55d5b'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n\n\n    def init_web(self, n: int = 80):\n        \"\"\"\n        label:\n            en: '%1 init_web port_no: %2'\n        params:\n            n:\n                name: n\n                type: int\n                default: '80'\n        \"\"\"\n        return\n\n    def start_web_server(self):\n        \"\"\"\n        label:\n            en: ' %1 start_web_server'\n        \"\"\"\n        return\n\n    def set_motor(self):\n        \"\"\"\n        label:\n            en: ' %1 set_motor'\n        \"\"\"\n        return\n\n    def set_tts(self):\n        \"\"\"\n        label:\n            en: ' %1 set_tts'\n        \"\"\"\n        return\n\n    def set_asr(self):\n        \"\"\"\n        label:\n            en: ' %1 set_asr'\n        \"\"\"\n        return\n\n    def connect_wlan(self, trial: int = 5):\n        \"\"\"\n        label:\n            en: '%1 connect_wlan trial: %2'\n        params:\n            trial:\n                name: trial\n                type: int\n                default: '5'\n                field: number\n                max: '100'\n                min: '0'\n        \"\"\"\n        return None\n\n    def isconnected_wlan(self):\n        \"\"\"\n        label:\n            en: ' %1 isconnected_wlan'\n        \"\"\"\n        return False\n\n    def set_torque(self, val: bool = True):\n        \"\"\"\n        label:\n            en: '%1 set_torque flag: %2'\n        params:\n            val:\n                name: val\n                type: bool\n                default: 'True'\n                field: switch\n        \"\"\"\n        return True\n\n    def stop(self):\n        \"\"\"\n        label:\n            en: ' %1 stop'\n        \"\"\"\n        return\n\n    def set_goal_position(self, pose: list = [0, 0]):\n        \"\"\"\n        label:\n            en: '%1 set_goal_position pose: %2'\n        params:\n            pose:\n                name: pose\n                type: list\n                default: '[0, 0]'\n        \"\"\"\n        return False\n\n    def do_asr_process(self):\n        \"\"\"\n        label:\n            en: ' %1 do_asr_process'\n        \"\"\"\n        return\n\n    def move(self, h_deg: int = 0, t_deg: int = 0):\n        \"\"\"\n        label:\n            en: '%1 move h_deg: %2  t_deg: %3'\n        params:\n            h_deg:\n                name: h_deg\n                type: int\n                default: '0'\n                field: number\n                max: '100'\n                min: '0'\n            t_deg:\n                name: t_deg\n                type: int\n                default: '0'\n                field: number\n                max: '100'\n                min: '0'\n        \"\"\"\n        return\n\n    def update(self):\n        \"\"\"\n        label:\n            en: ' %1 update'\n        \"\"\"\n        return\n\n\n","version":"alpha2"}
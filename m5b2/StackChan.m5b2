{"category":"StackChan","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_STACKCHAN_LANGUAGES = {\n  \"CUSTOM_STACKCHAN_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_STACKCHAN_INIT_WEB\": {\n    \"en\": \" %1 init_web, n: %2\"\n  },\n  \"CUSTOM_STACKCHAN_SET_MOTOR\": {\n    \"en\": \" %1 set_motor\"\n  },\n  \"CUSTOM_STACKCHAN_SET_TTS\": {\n    \"en\": \" %1 set_tts\"\n  },\n  \"CUSTOM_STACKCHAN_SET_ASR\": {\n    \"en\": \" %1 set_asr\"\n  },\n  \"CUSTOM_STACKCHAN_CONNECT_WLAN\": {\n    \"en\": \" %1 connect_wlan, name: %2\"\n  },\n  \"CUSTOM_STACKCHAN_ISCONNECTED_WLAN\": {\n    \"en\": \" %1 isconnected_wlan\"\n  },\n  \"CUSTOM_STACKCHAN_SET_TORQUE\": {\n    \"en\": \"%1 set_torque, val: %2\"\n  },\n  \"CUSTOM_STACKCHAN_STOP_WEB\": {\n    \"en\": \" %1 stop_web\"\n  },\n  \"CUSTOM_STACKCHAN_SET_GOAL_POSITION\": {\n    \"en\": \" %1 set_goal_position, pose: %2\"\n  },\n  \"CUSTOM_STACKCHAN_MOVE\": {\n    \"en\": \" %1 move, p_deg: %2, t_deg: %3\"\n  },\n  \"CUSTOM_STACKCHAN_UPDATE\": {\n    \"en\": \" %1 update\"\n  }\n};\n\nconst initType = 'custom_stackchan_init';\nBlockly.BlockRegExpList['custom_stackchan'] = {\n  regexp: new RegExp(/^custom_stackchan_/),\n  code: \"from StackChan import StackChan\",\n  initBlockType: initType,\n  categoryId: 'custom_stackchan',\n}\nBlockly.utils.registerLanguages(CUSTOM_STACKCHAN_LANGUAGES)\n\nBlockly.Msg.CUSTOM_STACKCHAN_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_STACKCHAN = 'StackChan'\n\nBlockly.utils.getcustom_stackchanOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['stackchan_0', 'stackchan_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_stackchan_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_stackchanOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'stackchan_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = StackChan()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_init_web\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_INIT_WEB,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'n'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_init_web\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var n = Blockly.Python.valueToCode(block, 'n', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.init_web(${n})\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_set_motor\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_MOTOR,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_motor\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.set_motor()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_set_tts\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_TTS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_tts\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.set_tts()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_set_asr\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_ASR,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_asr\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.set_asr()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_connect_wlan\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_CONNECT_WLAN,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'name'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_connect_wlan\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var name = Blockly.Python.valueToCode(block, 'name', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.connect_wlan(${name})\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_isconnected_wlan\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_ISCONNECTED_WLAN,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_isconnected_wlan\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.isconnected_wlan()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_stackchan_set_torque\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_TORQUE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          \"type\": \"field_switch\",\n          \"name\": \"val\",\n          \"options\": [\n            ['True', 'True'],\n            ['False', 'False']\n          ],\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_torque\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var val = block.getFieldValue('val');\n  return [`${varname}.set_torque(${val})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_stackchan_stop_web\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_STOP_WEB,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_stop_web\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.stop_web()\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_set_goal_position\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_SET_GOAL_POSITION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'pose'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_set_goal_position\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var pose = Blockly.Python.valueToCode(block, 'pose', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.set_goal_position(${pose})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_stackchan_move\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_MOVE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'p_deg'\n        }, {\n          'type': 'input_value',\n          'name': 't_deg'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_move\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var p_deg = Blockly.Python.valueToCode(block, 'p_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  var t_deg = Blockly.Python.valueToCode(block, 't_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.move(${p_deg}, ${t_deg})\\n`\n}\n\nBlockly.Blocks[\"custom_stackchan_update\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_STACKCHAN_UPDATE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_stackchanOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_stackchan_update\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.update()\\n`\n}","toolbox":"\n<category name=\"StackChan\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_stackchan\">\n<title text=\"StackChan\" docsLink=\"\"></title>\n<block type=\"custom_stackchan_init\"/><block type=\"custom_stackchan_init_web\">\n  <value name=\"n\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">80</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_stackchan_set_motor\"/><block type=\"custom_stackchan_set_tts\"/><block type=\"custom_stackchan_set_asr\"/><block type=\"custom_stackchan_connect_wlan\">\n  <value name=\"name\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">None</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_stackchan_isconnected_wlan\"/><block type=\"custom_stackchan_set_torque\">\n  <field name=\"val\">True</field>\n</block><block type=\"custom_stackchan_stop_web\"/><block type=\"custom_stackchan_set_goal_position\">\n  <value name=\"pose\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_stackchan_move\">\n  <value name=\"p_deg\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"t_deg\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_stackchan_update\"/>\n</category>\n","toolboxitemid":"custom_stackchan","block_type":["custom_stackchan___init__","custom_stackchan_init_web","custom_stackchan_set_motor","custom_stackchan_set_tts","custom_stackchan_set_asr","custom_stackchan_connect_wlan","custom_stackchan_isconnected_wlan","custom_stackchan_set_torque","custom_stackchan_stop_web","custom_stackchan_set_goal_position","custom_stackchan_move","custom_stackchan_update"]},"data":{"name":"StackChan","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"import Face\r\nimport util\r\nimport json\r\nimport Gtts\r\nimport WebServer\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"return":"","source":"    util.mount_sd()\r\n    try:\r\n      self.config=json.loads(util.get_file_contents(\"/sd/stackchan.json\"))\r\n    except:\r\n      self.config={}\r\n    # WLAN\r\n    self.wlan_config = util.get_wlan_conf()\r\n    if 'ap_name' in self.config:\r\n      self.ap_name = self.config['ap_name']\r\n    else:\r\n      self.ap_name = list(self.wlan_config.keys())[0]\r\n    self.wlan = None\r\n    #\r\n    # \r\n    self.face=Face.Face()\r\n    self.set_motor()\r\n    self.set_tts()\r\n    self.set_asr()\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"init_web","note":{},"label":{"en":" %1 init_web, n: %2"},"params":[{"name":"n","type":"int","default":"80","note":{},"field":""}],"return":"","source":"    if  'web_server' in self.config:\r\n      try:\r\n        port = int(self.config['web_server'])\r\n      except:\r\n        port = n\r\n    else:\r\n      port = n\r\n\r\n    self.web_server=WebServer.WebServer(port)\r\n    self.web_server.registerCommand(\"/move\", self.set_goal_position)\r\n    self.web_server.registerCommand(\"/face\", self.face.set_face_id)\r\n    if self.tts:\r\n        self.web_server.registerCommand(\"/tts\", self.tts.set_request)\r\n\r\n    if self.isconnected_wlan():\r\n        self.web_server.start()\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_motor","note":{},"label":{"en":" %1 set_motor"},"params":[],"return":"","source":"    try:\r\n      if self.config['motor'] == 'Dynamixel':\r\n        import DynamixelDriver\r\n        self.motor = DynamixelDriver.DynamixelDriver()\r\n      elif self.config['motor'] == 'SG90':\r\n        import SG90Driver\r\n        self.motor = SG90Driver.SG90Driver()\r\n      else:\r\n        self.motor = None\r\n    except:\r\n      self.motor = None\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_tts","note":{},"label":{"en":" %1 set_tts"},"params":[],"return":"","source":"    tts_name = 'google'\r\n    if 'tts' in self.config:\r\n      tts_name = self.config['tts']\r\n\r\n    if tts_name == 'voicevox':\r\n      import Voicevox\r\n      self.tts = Voicevox.Voicevox(self.config['tts_ip'])\r\n    elif tts_name == 'melo_tts':\r\n      import MeloTts\r\n      self.tts = MeloTts.MeloTts()\r\n    else:\r\n      import Gtts\r\n      self.tts = Gtts.Gtts()\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_asr","note":{},"label":{"en":" %1 set_asr"},"params":[],"return":"","source":"    asr_name = 'google'\r\n    if 'asr' in self.config:\r\n      asr_name = self.config['asr']\r\n\r\n    if asr_name == 'vosk':\r\n      import VoskAsr\r\n      self.asr = VoskAsr.VoskAsr(self.config['asr_ip'])\r\n    elif asr_name == 'llm_asr':\r\n      print(\"LLM-ASR not supported\")\r\n      self.asr = None\r\n    elif asr_name == 'llm_whisper':\r\n      print(\"LLM-Wisper not supported\")\r\n      self.asr = None\r\n    else:\r\n      import Gasr\r\n      self.asr = Gasr.Gasr()    \r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"connect_wlan","note":{},"label":{"en":" %1 connect_wlan, name: %2"},"params":[{"name":"name","type":null,"default":"None","note":{},"field":""}],"return":"","source":"    if name is None:\r\n      name=self.ap_name\r\n    if self.wlan is None:\r\n      self.wlan=util.setup_wlan(name)\r\n    else:\r\n      util.connect_wlan(self.wlan, name, 5)\r\n    if self.wlan.isconnected():\r\n      self.face.print_info(\"IP:\" + self.wlan.ifconfig()[0])\r\n    else:\r\n      self.face.print_info(\"WLAN not connected\")\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"isconnected_wlan","note":{},"label":{"en":" %1 isconnected_wlan"},"params":[],"return":"","source":"    if self.wlan:\r\n      return self.wlan.isconnected()\r\n    return False\r","ast_return":{"code":"False","id":null},"doc_return":null},{"name":"set_torque","note":{},"label":{"en":"%1 set_torque, val: %2"},"params":[{"name":"val","type":"bool","default":"True","field":"switch","comment":"","options":""}],"return":"","source":"    try:\r\n      if isinstance(val, str): val = eval(val)\r\n      self.motor.setTorque(val)\r\n    except:\r\n      pass\r\n    return True\r","ast_return":{"code":"True","id":null},"doc_return":null},{"name":"stop_web","note":{},"label":{"en":" %1 stop_web"},"params":[],"return":"","source":"    self.web_server.stop()\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_goal_position","note":{},"label":{"en":" %1 set_goal_position, pose: %2"},"params":[{"name":"pose","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    if self.motor:\r\n      if isinstance(pose, str):\r\n        pose = eval(pose)\r\n      self.motor.move(pose[0], pose[1])\r\n      return True\r\n    return False\r","ast_return":{"code":"False","id":null},"doc_return":null},{"name":"move","note":{},"label":{"en":" %1 move, p_deg: %2, t_deg: %3"},"params":[{"name":"p_deg","type":"int","default":"0","note":{},"field":"number","options":""},{"name":"t_deg","type":"int","default":"0","note":{},"field":"number","options":""}],"return":"","source":"    self.motor.move(p_deg, t_deg, True)\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"update","note":{},"label":{"en":" %1 update"},"params":[],"return":"","source":"      self.face.update()\r\n      if self.motor:\r\n        self.motor.update()\r\n      if self.tts:\r\n        self.tts.check_request()\r","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"stackchan"},"pyCode":"\n\"\"\"\nfile     StackChan\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nimport Face\nimport util\nimport json\nimport Gtts\nimport WebServer\n\nclass StackChan:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n    util.mount_sd()\n    try:\n      self.config=json.loads(util.get_file_contents(\"/sd/stackchan.json\"))\n    except:\n      self.config={}\n    # WLAN\n    self.wlan_config = util.get_wlan_conf()\n    if 'ap_name' in self.config:\n      self.ap_name = self.config['ap_name']\n    else:\n      self.ap_name = list(self.wlan_config.keys())[0]\n    self.wlan = None\n    #\n    # \n    self.face=Face.Face()\n    self.set_motor()\n    self.set_tts()\n    self.set_asr()\n\n    def init_web(self, n: int = 80):\n        \"\"\"\n        label:\n            en: ' %1 init_web, n: %2'\n        params:\n            n:\n                name: n\n                type: int\n                default: '80'\n        \"\"\"\n    if  'web_server' in self.config:\n      try:\n        port = int(self.config['web_server'])\n      except:\n        port = n\n    else:\n      port = n\n\n    self.web_server=WebServer.WebServer(port)\n    self.web_server.registerCommand(\"/move\", self.set_goal_position)\n    self.web_server.registerCommand(\"/face\", self.face.set_face_id)\n    if self.tts:\n        self.web_server.registerCommand(\"/tts\", self.tts.set_request)\n\n    if self.isconnected_wlan():\n        self.web_server.start()\n    return\n\n    def set_motor(self):\n        \"\"\"\n        label:\n            en: ' %1 set_motor'\n        \"\"\"\n    try:\n      if self.config['motor'] == 'Dynamixel':\n        import DynamixelDriver\n        self.motor = DynamixelDriver.DynamixelDriver()\n      elif self.config['motor'] == 'SG90':\n        import SG90Driver\n        self.motor = SG90Driver.SG90Driver()\n      else:\n        self.motor = None\n    except:\n      self.motor = None\n    return\n\n    def set_tts(self):\n        \"\"\"\n        label:\n            en: ' %1 set_tts'\n        \"\"\"\n    tts_name = 'google'\n    if 'tts' in self.config:\n      tts_name = self.config['tts']\n\n    if tts_name == 'voicevox':\n      import Voicevox\n      self.tts = Voicevox.Voicevox(self.config['tts_ip'])\n    elif tts_name == 'melo_tts':\n      import MeloTts\n      self.tts = MeloTts.MeloTts()\n    else:\n      import Gtts\n      self.tts = Gtts.Gtts()\n\n    def set_asr(self):\n        \"\"\"\n        label:\n            en: ' %1 set_asr'\n        \"\"\"\n    asr_name = 'google'\n    if 'asr' in self.config:\n      asr_name = self.config['asr']\n\n    if asr_name == 'vosk':\n      import VoskAsr\n      self.asr = VoskAsr.VoskAsr(self.config['asr_ip'])\n    elif asr_name == 'llm_asr':\n      print(\"LLM-ASR not supported\")\n      self.asr = None\n    elif asr_name == 'llm_whisper':\n      print(\"LLM-Wisper not supported\")\n      self.asr = None\n    else:\n      import Gasr\n      self.asr = Gasr.Gasr()    \n\n    def connect_wlan(self, name = None):\n        \"\"\"\n        label:\n            en: ' %1 connect_wlan, name: %2'\n        params:\n            name:\n                name: name\n                default: None\n        \"\"\"\n    if name is None:\n      name=self.ap_name\n    if self.wlan is None:\n      self.wlan=util.setup_wlan(name)\n    else:\n      util.connect_wlan(self.wlan, name, 5)\n    if self.wlan.isconnected():\n      self.face.print_info(\"IP:\" + self.wlan.ifconfig()[0])\n    else:\n      self.face.print_info(\"WLAN not connected\")\n\n    def isconnected_wlan(self):\n        \"\"\"\n        label:\n            en: ' %1 isconnected_wlan'\n        \"\"\"\n    if self.wlan:\n      return self.wlan.isconnected()\n    return False\n\n    def set_torque(self, val: bool = True):\n        \"\"\"\n        label:\n            en: '%1 set_torque, val: %2'\n        params:\n            val:\n                name: val\n                type: bool\n                default: 'True'\n                field: switch\n        \"\"\"\n    try:\n      if isinstance(val, str): val = eval(val)\n      self.motor.setTorque(val)\n    except:\n      pass\n    return True\n\n    def stop_web(self):\n        \"\"\"\n        label:\n            en: ' %1 stop_web'\n        \"\"\"\n    self.web_server.stop()\n    return\n\n    def set_goal_position(self, pose):\n        \"\"\"\n        label:\n            en: ' %1 set_goal_position, pose: %2'\n        params:\n            pose:\n                name: pose\n        \"\"\"\n    if self.motor:\n      if isinstance(pose, str):\n        pose = eval(pose)\n      self.motor.move(pose[0], pose[1])\n      return True\n    return False\n\n    def move(self, p_deg: int = 0, t_deg: int = 0):\n        \"\"\"\n        label:\n            en: ' %1 move, p_deg: %2, t_deg: %3'\n        params:\n            p_deg:\n                name: p_deg\n                type: int\n                default: '0'\n                field: number\n            t_deg:\n                name: t_deg\n                type: int\n                default: '0'\n                field: number\n        \"\"\"\n    self.motor.move(p_deg, t_deg, True)\n    return\n\n    def update(self):\n        \"\"\"\n        label:\n            en: ' %1 update'\n        \"\"\"\n      self.face.update()\n      if self.motor:\n        self.motor.update()\n      if self.tts:\n        self.tts.check_request()\n\n\n","version":"alpha2"}
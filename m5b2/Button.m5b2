{"category":"Button","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_BUTTON_LANGUAGES = {\n  \"CUSTOM_BUTTON_INIT\": {\n    \"en\": \"%1 init, name: %2 , x: %3 , y: %4 , w: %5 , h: %6\"\n  },\n  \"CUSTOM_BUTTON_IS_TAPPED\": {\n    \"en\": \" %1 is_tapped, x: %2, y: %3\"\n  },\n  \"CUSTOM_BUTTON_CHECK\": {\n    \"en\": \" %1 check\"\n  },\n  \"CUSTOM_BUTTON_CHECK_TAP\": {\n    \"en\": \" %1 check_tap\"\n  },\n  \"CUSTOM_BUTTON_PRINT_NAME\": {\n    \"en\": \" %1 print_name, val: %2\"\n  },\n  \"CUSTOM_BUTTON_SET_CALLBACK\": {\n    \"en\": \" %1 set_callback, obj: %2\"\n  },\n  \"CUSTOM_BUTTON_UPDATE\": {\n    \"en\": \" %1 update\"\n  }\n};\n\nconst initType = 'custom_button_init';\nBlockly.BlockRegExpList['custom_button'] = {\n  regexp: new RegExp(/^custom_button_/),\n  code: \"from Button import Button\",\n  initBlockType: initType,\n  categoryId: 'custom_button',\n}\nBlockly.utils.registerLanguages(CUSTOM_BUTTON_LANGUAGES)\n\nBlockly.Msg.CUSTOM_BUTTON_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_BUTTON = 'Button'\n\nBlockly.utils.getcustom_buttonOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['button_0', 'button_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_button_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_BUTTON_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_buttonOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'button_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'name'\n        }, {\n          'type': 'input_value',\n          'name': 'x'\n        }, {\n          'type': 'input_value',\n          'name': 'y'\n        }, {\n          'type': 'input_value',\n          'name': 'w'\n        }, {\n          'type': 'input_value',\n          'name': 'h'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_button_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var name = Blockly.Python.valueToCode(block, 'name', Blockly.Python.ORDER_FUNCTION_CALL);\n  var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_FUNCTION_CALL);\n  var y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_FUNCTION_CALL);\n  var w = Blockly.Python.valueToCode(block, 'w', Blockly.Python.ORDER_FUNCTION_CALL);\n  var h = Blockly.Python.valueToCode(block, 'h', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = Button(${name}, ${x}, ${y}, ${w}, ${h})\\n`\n}\n\nBlockly.Blocks[\"custom_button_is_tapped\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_BUTTON_IS_TAPPED,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_buttonOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'x'\n        }, {\n          'type': 'input_value',\n          'name': 'y'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_button_is_tapped\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_FUNCTION_CALL);\n  var y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.is_tapped(${x}, ${y})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_button_check\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_BUTTON_CHECK,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_buttonOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_button_check\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.check()\\n`\n}\n\nBlockly.Blocks[\"custom_button_check_tap\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_BUTTON_CHECK_TAP,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_buttonOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_button_check_tap\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.check_tap()\\n`\n}\n\nBlockly.Blocks[\"custom_button_print_name\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_BUTTON_PRINT_NAME,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_buttonOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'val'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_button_print_name\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var val = Blockly.Python.valueToCode(block, 'val', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.print_name(${val})\\n`\n}\n\nBlockly.Blocks[\"custom_button_set_callback\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_BUTTON_SET_CALLBACK,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_buttonOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'obj'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_button_set_callback\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var obj = Blockly.Python.valueToCode(block, 'obj', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.set_callback(${obj})\\n`\n}\n\nBlockly.Blocks[\"custom_button_update\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_BUTTON_UPDATE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_buttonOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_button_update\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.update()\\n`\n}","toolbox":"\n<category name=\"Button\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_button\">\n<title text=\"Button\" docsLink=\"\"></title>\n<block type=\"custom_button_init\">\n  <value name=\"name\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"x\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"y\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"w\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"h\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_button_is_tapped\">\n  <value name=\"x\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"y\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_button_check\"/><block type=\"custom_button_check_tap\"/><block type=\"custom_button_print_name\">\n  <value name=\"val\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">None</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_button_set_callback\">\n  <value name=\"obj\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_button_update\"/>\n</category>\n","toolboxitemid":"custom_button","block_type":["custom_button___init__","custom_button_is_tapped","custom_button_check","custom_button_check_tap","custom_button_print_name","custom_button_set_callback","custom_button_update"]},"data":{"name":"Button","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"import M5\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init, name: %2 , x: %3 , y: %4 , w: %5 , h: %6"},"params":[{"name":"name","type":null,"default":null,"note":{},"field":""},{"name":"x","type":null,"default":null,"note":{},"field":""},{"name":"y","type":null,"default":null,"note":{},"field":""},{"name":"w","type":null,"default":null,"note":{},"field":""},{"name":"h","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    self.name = name\r\n    self.rect=[x, y, w, h]\r\n    self.tapped=False\r\n    self.callback=self.print_name\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"is_tapped","note":{},"label":{"en":" %1 is_tapped, x: %2, y: %3"},"params":[{"name":"x","type":null,"default":null,"note":{},"field":""},{"name":"y","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    w=self.rect[2]\r\n    h=self.rect[3]\r\n    #print(x, y)\r\n    return (self.rect[0] < x and self.rect[0]+w > x and self.rect[1] < y and self.rect[1]+h > y)\r","ast_return":{"code":"self.rect[0] < x and self.rect[0] + w > x and (self.rect[1] < y) and (self.rect[1] + h > y)","id":null},"doc_return":null},{"name":"check","note":{},"label":{"en":" %1 check"},"params":[],"return":"","source":"    if self.callback:\r\n        if self.is_tapped(M5.Touch.getX(), M5.Touch.getY()):\r\n            if self.tapped:\r\n              try:\r\n                self.callback()\r\n              except:\r\n                print(\"Fail to execute callback\")\r\n\r\n    else:\r\n        print(\"Callback not fount\")\r\n    self.tapped = False\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"check_tap","note":{},"label":{"en":" %1 check_tap"},"params":[],"return":"","source":"    if self.is_tapped(M5.Touch.getX(), M5.Touch.getY()):\r\n       self.tapped=True\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"print_name","note":{},"label":{"en":" %1 print_name, val: %2"},"params":[{"name":"val","type":null,"default":"None","note":{},"field":""}],"return":"","source":"    print(self.name)\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_callback","note":{},"label":{"en":" %1 set_callback, obj: %2"},"params":[{"name":"obj","type":null,"default":null,"note":{},"field":""}],"return":"","source":"    if isinstance(obj, str):\r\n      print(obj, eval(obj))\r\n      self.callback = eval(obj)\r\n    else:\r\n      try:\r\n        self.callback = obj.callback\r\n      except:\r\n        self.callback = None\r\n    return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"update","note":{},"label":{"en":" %1 update"},"params":[],"return":"","source":"    M5.update()\r\n    self.check()\r","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"button"},"pyCode":"\n\"\"\"\nfile     Button\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nimport M5\n\nclass Button:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, name, x, y, w, h):\n        \"\"\"\n        label:\n            en: '%1 init, name: %2 , x: %3 , y: %4 , w: %5 , h: %6'\n        params:\n            name:\n                name: name\n            x:\n                name: x\n            y:\n                name: y\n            w:\n                name: w\n            h:\n                name: h\n        \"\"\"\n    self.name = name\n    self.rect=[x, y, w, h]\n    self.tapped=False\n    self.callback=self.print_name\n\n    def is_tapped(self, x, y):\n        \"\"\"\n        label:\n            en: ' %1 is_tapped, x: %2, y: %3'\n        params:\n            x:\n                name: x\n            y:\n                name: y\n        \"\"\"\n    w=self.rect[2]\n    h=self.rect[3]\n    #print(x, y)\n    return (self.rect[0] < x and self.rect[0]+w > x and self.rect[1] < y and self.rect[1]+h > y)\n\n    def check(self):\n        \"\"\"\n        label:\n            en: ' %1 check'\n        \"\"\"\n    if self.callback:\n        if self.is_tapped(M5.Touch.getX(), M5.Touch.getY()):\n            if self.tapped:\n              try:\n                self.callback()\n              except:\n                print(\"Fail to execute callback\")\n\n    else:\n        print(\"Callback not fount\")\n    self.tapped = False\n    return\n\n    def check_tap(self):\n        \"\"\"\n        label:\n            en: ' %1 check_tap'\n        \"\"\"\n    if self.is_tapped(M5.Touch.getX(), M5.Touch.getY()):\n       self.tapped=True\n    return\n\n    def print_name(self, val = None):\n        \"\"\"\n        label:\n            en: ' %1 print_name, val: %2'\n        params:\n            val:\n                name: val\n                default: None\n        \"\"\"\n    print(self.name)\n\n    def set_callback(self, obj):\n        \"\"\"\n        label:\n            en: ' %1 set_callback, obj: %2'\n        params:\n            obj:\n                name: obj\n        \"\"\"\n    if isinstance(obj, str):\n      print(obj, eval(obj))\n      self.callback = eval(obj)\n    else:\n      try:\n        self.callback = obj.callback\n      except:\n        self.callback = None\n    return\n\n    def update(self):\n        \"\"\"\n        label:\n            en: ' %1 update'\n        \"\"\"\n    M5.update()\n    self.check()\n\n\n","version":"alpha2"}
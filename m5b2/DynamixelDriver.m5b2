{"category":"DynamixelDriver","color":"#076a28","uiflow2":{"jscode":"const CUSTOM_DYNAMIXELDRIVER_LANGUAGES = {\n  \"CUSTOM_DYNAMIXELDRIVER_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_SETTORQUE\": {\n    \"en\": \" %1 setTorque, flag: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_ONATTACHED\": {\n    \"en\": \" %1 onAttached\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_ONDETACHED\": {\n    \"en\": \" %1 onDetached\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_CONTROL\": {\n    \"en\": \" %1 control, tm: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_APPLYROTATION\": {\n    \"en\": \"%1 applyRotation pos %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_GETROTATION\": {\n    \"en\": \" %1 getRotation\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_MOVE\": {\n    \"en\": \"%1 move: h_deg: %2 v_deg: %3  force_update: %4\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_GET_POSITION\": {\n    \"en\": \" %1 get_position\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_UPDATE\": {\n    \"en\": \" %1 update\"\n  }\n};\n\nconst initType = 'custom_dynamixeldriver_init';\nBlockly.BlockRegExpList['custom_dynamixeldriver'] = {\n  regexp: new RegExp(/^custom_dynamixeldriver_/),\n  code: \"from DynamixelDriver import DynamixelDriver\",\n  initBlockType: initType,\n  categoryId: 'custom_dynamixeldriver',\n}\nBlockly.utils.registerLanguages(CUSTOM_DYNAMIXELDRIVER_LANGUAGES)\n\nBlockly.Msg.CUSTOM_DYNAMIXELDRIVER_HUE = '#076a28'\nBlockly.Msg.CUSTOM_DYNAMIXELDRIVER = 'DynamixelDriver'\n\nBlockly.utils.getcustom_dynamixeldriverOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['dynamixeldriver_0', 'dynamixeldriver_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_dynamixeldriver_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_dynamixeldriverOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'dynamixeldriver_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = DynamixelDriver()\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_settorque\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETTORQUE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'flag'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_settorque\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var flag = Blockly.Python.valueToCode(block, 'flag', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.setTorque(${flag})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_onattached\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_ONATTACHED,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_onattached\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.onAttached()\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_ondetached\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_ONDETACHED,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_ondetached\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.onDetached()\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_control\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_CONTROL,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tm'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_control\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.control(${tm})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_applyrotation\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_APPLYROTATION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'pose'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_applyrotation\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var pose = Blockly.Python.valueToCode(block, 'pose', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.applyRotation(${pose})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_getrotation\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_GETROTATION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_getrotation\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.getRotation()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_move\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_MOVE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'h_deg'\n        }, {\n          'type': 'input_value',\n          'name': 'v_deg'\n        }, {\n          \"type\": \"field_switch\",\n          \"name\": \"force_update\",\n          \"options\": [\n            ['True', 'True'],\n            ['False', 'False']\n          ],\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_move\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var h_deg = Blockly.Python.valueToCode(block, 'h_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  var v_deg = Blockly.Python.valueToCode(block, 'v_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  var force_update = block.getFieldValue('force_update');\n  return `${varname}.move(${h_deg}, ${v_deg}, ${force_update})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_get_position\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_GET_POSITION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_get_position\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.get_position()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_update\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_UPDATE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#076a28\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_update\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.update()\\n`\n}","toolbox":"\n<category name=\"DynamixelDriver\" colour=\"#076a28\" hidden=\"true\" toolboxitemid=\"custom_dynamixeldriver\">\n<title text=\"DynamixelDriver\" docsLink=\"\"></title>\n<block type=\"custom_dynamixeldriver_init\"/><block type=\"custom_dynamixeldriver_settorque\">\n  <value name=\"flag\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_onattached\"/><block type=\"custom_dynamixeldriver_ondetached\"/><block type=\"custom_dynamixeldriver_control\">\n  <value name=\"tm\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_applyrotation\">\n  <value name=\"pose\">\n    <block type=\"lists_create_with\">\n      <mutation items=\"2\"/>\n      <value name=\"ADD0\">\n        <block type=\"math_number\">\n          <field name=\"NUM\">0</field>\n        </block>\n      </value>\n      <value name=\"ADD1\">\n        <block type=\"math_number\">\n          <field name=\"NUM\">0</field>\n        </block>\n      </value>\n    </block>\n  </value>\n</block><block type=\"custom_dynamixeldriver_getrotation\"/><block type=\"custom_dynamixeldriver_move\">\n  <value name=\"h_deg\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <value name=\"v_deg\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n  <field name=\"force_update\">False</field>\n</block><block type=\"custom_dynamixeldriver_get_position\"/><block type=\"custom_dynamixeldriver_update\"/>\n</category>\n","toolboxitemid":"custom_dynamixeldriver","block_type":["custom_dynamixeldriver___init__","custom_dynamixeldriver_settorque","custom_dynamixeldriver_onattached","custom_dynamixeldriver_ondetached","custom_dynamixeldriver_control","custom_dynamixeldriver_applyrotation","custom_dynamixeldriver_getrotation","custom_dynamixeldriver_move","custom_dynamixeldriver_get_position","custom_dynamixeldriver_update"]},"data":{"name":"DynamixelDriver","note":{"en":""},"details":{"color":"#076a28","link":"","image":"","category":"Custom"},"header":{"file":"DynamixelDriver","time":"2025-09-02","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"return":"","source":"","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"setTorque","note":{},"label":{"en":" %1 setTorque, flag: %2"},"params":[{"name":"flag","type":null,"default":null,"note":{},"field":""}],"return":"","source":"","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"onAttached","note":{},"label":{"en":" %1 onAttached"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"onDetached","note":{},"label":{"en":" %1 onDetached"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"control","note":{},"label":{"en":" %1 control, tm: %2"},"params":[{"name":"tm","type":"int","default":"0","note":{},"field":""}],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"applyRotation","note":{},"label":{"en":"%1 applyRotation pos %2"},"params":[{"name":"pose","type":"list","default":"[0,0]","note":{},"field":"","options":""}],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"getRotation","note":{},"label":{"en":" %1 getRotation"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":"None"},"doc_return":null},{"name":"move","note":{},"label":{"en":"%1 move: h_deg: %2 v_deg: %3  force_update: %4"},"params":[{"name":"h_deg","type":"int","default":"0","note":{},"field":"number","options":""},{"name":"v_deg","type":"int","default":"0","note":{},"field":"number","options":""},{"name":"force_update","type":"bool","default":"False","note":{},"field":"switch"}],"return":"","source":"        return","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"get_position","note":{},"label":{"en":" %1 get_position"},"params":[],"return":"","source":"        return","ast_return":{"code":null,"id":"None"},"doc_return":null},{"name":"update","note":{},"label":{"en":" %1 update"},"params":[],"return":"","source":"\n        return","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"dynamixeldriver"},"pyCode":"\n\"\"\"\nfile     DynamixelDriver\ntime     2025-09-02\nauthor   \nemail   \nlicense  \n\"\"\"\n\n\n\nclass DynamixelDriver:\n    \"\"\"\n    note:\n        en: ''\n    details:\n        color: '#076a28'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n\n\n    def setTorque(self, flag):\n        \"\"\"\n        label:\n            en: ' %1 setTorque, flag: %2'\n        params:\n            flag:\n                name: flag\n        \"\"\"\n\n\n    def onAttached(self):\n        \"\"\"\n        label:\n            en: ' %1 onAttached'\n        \"\"\"\n        return\n\n    def onDetached(self):\n        \"\"\"\n        label:\n            en: ' %1 onDetached'\n        \"\"\"\n        return\n\n    def control(self, tm: int = 0):\n        \"\"\"\n        label:\n            en: ' %1 control, tm: %2'\n        params:\n            tm:\n                name: tm\n                type: int\n                default: '0'\n        \"\"\"\n        return\n\n    def applyRotation(self, pose: list = [0,0]):\n        \"\"\"\n        label:\n            en: '%1 applyRotation pos %2'\n        params:\n            pose:\n                name: pose\n                type: list\n                default: '[0,0]'\n        \"\"\"\n        return\n\n    def getRotation(self) -> None:\n        \"\"\"\n        label:\n            en: ' %1 getRotation'\n        \"\"\"\n        return\n\n    def move(self, h_deg: int = 0, v_deg: int = 0, force_update: bool = False):\n        \"\"\"\n        label:\n            en: '%1 move: h_deg: %2 v_deg: %3  force_update: %4'\n        params:\n            h_deg:\n                name: h_deg\n                type: int\n                default: '0'\n                field: number\n            v_deg:\n                name: v_deg\n                type: int\n                default: '0'\n                field: number\n            force_update:\n                name: force_update\n                type: bool\n                default: 'False'\n                field: switch\n        \"\"\"\n        return\n\n    def get_position(self) -> None:\n        \"\"\"\n        label:\n            en: ' %1 get_position'\n        \"\"\"\n        return\n\n    def update(self):\n        \"\"\"\n        label:\n            en: ' %1 update'\n        \"\"\"\n\n        return\n\n\n","version":"alpha2"}
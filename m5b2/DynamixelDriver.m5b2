{"category":"DynamixelDriver","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_DYNAMIXELDRIVER_LANGUAGES = {\n  \"CUSTOM_DYNAMIXELDRIVER_INIT\": {\n    \"en\": \" %1 init\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_CHECKSUM\": {\n    \"en\": \" %1 checksum, data: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_MAKE_COMMAND\": {\n    \"en\": \" %1 make_command, inst: %2, addr: %3, params: %4\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_SEND_COMMAND\": {\n    \"en\": \" %1 send_command, inst: %2, addr: %3, params: %4\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_PARSE\": {\n    \"en\": \" %1 parse, data: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_READPRESENTPOSITION\": {\n    \"en\": \" %1 readPresentPosition\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_SETOPERATINGMODE\": {\n    \"en\": \" %1 setOperatingMode, mode: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_SETTORQUE\": {\n    \"en\": \" %1 setTorque, flag: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_SETGOALPOSITION\": {\n    \"en\": \" %1 setGoalPosition, angle: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_SETGOALCURRENT\": {\n    \"en\": \" %1 setGoalCurrent, val: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_SETPROFILEACCELERATION\": {\n    \"en\": \" %1 setProfileAcceleration, val: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_SETPROFILEVELOCITY\": {\n    \"en\": \" %1 setProfileVelocity, val: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_UPDATE\": {\n    \"en\": \" %1 update\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_GETPRESENTPOSITION\": {\n    \"en\": \" %1 getPresentPosition\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_ONATTACHED\": {\n    \"en\": \" %1 onAttached\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_ONDETACHED\": {\n    \"en\": \" %1 onDetached\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_CONTROL\": {\n    \"en\": \" %1 control, tm: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_APPLYROTATION\": {\n    \"en\": \" %1 applyRotation, pose: %2\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_GETROTATION\": {\n    \"en\": \" %1 getRotation\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_MOVE\": {\n    \"en\": \" %1 move, h_deg: %2, v_deg: %3, force_update: %4\"\n  },\n  \"CUSTOM_DYNAMIXELDRIVER_GET_POSITION\": {\n    \"en\": \" %1 get_position\"\n  }\n};\n\nconst initType = 'custom_dynamixeldriver_init';\nBlockly.BlockRegExpList['custom_dynamixeldriver'] = {\n  regexp: new RegExp(/^custom_dynamixeldriver_/),\n  code: \"from DynamixelDriver import DynamixelDriver\",\n  initBlockType: initType,\n  categoryId: 'custom_dynamixeldriver',\n}\nBlockly.utils.registerLanguages(CUSTOM_DYNAMIXELDRIVER_LANGUAGES)\n\nBlockly.Msg.CUSTOM_DYNAMIXELDRIVER_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_DYNAMIXELDRIVER = 'DynamixelDriver'\n\nBlockly.utils.getcustom_dynamixeldriverOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['dynamixeldriver_0', 'dynamixeldriver_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_dynamixeldriver_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_dynamixeldriverOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'dynamixeldriver_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'id'\n        }, {\n          'type': 'input_value',\n          'name': 'rx'\n        }, {\n          'type': 'input_value',\n          'name': 'tx'\n        }, {\n          'type': 'input_value',\n          'name': 'baud_rate'\n        }, {\n          'type': 'input_value',\n          'name': 'bits'\n        }, {\n          'type': 'input_value',\n          'name': 'parity'\n        }, {\n          'type': 'input_value',\n          'name': 'stop'\n        }, {\n          'type': 'input_value',\n          'name': 'uart_id'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var id = Blockly.Python.valueToCode(block, 'id', Blockly.Python.ORDER_FUNCTION_CALL);\n  var rx = Blockly.Python.valueToCode(block, 'rx', Blockly.Python.ORDER_FUNCTION_CALL);\n  var tx = Blockly.Python.valueToCode(block, 'tx', Blockly.Python.ORDER_FUNCTION_CALL);\n  var baud_rate = Blockly.Python.valueToCode(block, 'baud_rate', Blockly.Python.ORDER_FUNCTION_CALL);\n  var bits = Blockly.Python.valueToCode(block, 'bits', Blockly.Python.ORDER_FUNCTION_CALL);\n  var parity = Blockly.Python.valueToCode(block, 'parity', Blockly.Python.ORDER_FUNCTION_CALL);\n  var stop = Blockly.Python.valueToCode(block, 'stop', Blockly.Python.ORDER_FUNCTION_CALL);\n  var uart_id = Blockly.Python.valueToCode(block, 'uart_id', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = DynamixelDriver(${id}, ${rx}, ${tx}, ${baud_rate}, ${bits}, ${parity}, ${stop}, ${uart_id})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_checksum\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_CHECKSUM,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_checksum\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.checksum(${data})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_make_command\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_MAKE_COMMAND,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'inst'\n        }, {\n          'type': 'input_value',\n          'name': 'addr'\n        }, {\n          'type': 'input_value',\n          'name': 'params'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_make_command\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var inst = Blockly.Python.valueToCode(block, 'inst', Blockly.Python.ORDER_FUNCTION_CALL);\n  var addr = Blockly.Python.valueToCode(block, 'addr', Blockly.Python.ORDER_FUNCTION_CALL);\n  var params = Blockly.Python.valueToCode(block, 'params', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.make_command(${inst}, ${addr}, ${params})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_send_command\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SEND_COMMAND,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'inst'\n        }, {\n          'type': 'input_value',\n          'name': 'addr'\n        }, {\n          'type': 'input_value',\n          'name': 'params'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_send_command\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var inst = Blockly.Python.valueToCode(block, 'inst', Blockly.Python.ORDER_FUNCTION_CALL);\n  var addr = Blockly.Python.valueToCode(block, 'addr', Blockly.Python.ORDER_FUNCTION_CALL);\n  var params = Blockly.Python.valueToCode(block, 'params', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.send_command(${inst}, ${addr}, ${params})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_parse\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_PARSE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'data'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_parse\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var data = Blockly.Python.valueToCode(block, 'data', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.parse(${data})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_readpresentposition\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_READPRESENTPOSITION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_readpresentposition\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.readPresentPosition()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_setoperatingmode\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETOPERATINGMODE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'mode'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_setoperatingmode\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var mode = Blockly.Python.valueToCode(block, 'mode', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.setOperatingMode(${mode})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_settorque\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETTORQUE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'enable'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_settorque\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var enable = Blockly.Python.valueToCode(block, 'enable', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.setTorque(${enable})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_setgoalposition\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETGOALPOSITION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'pos'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_setgoalposition\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var pos = Blockly.Python.valueToCode(block, 'pos', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.setGoalPosition(${pos})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_setgoalcurrent\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETGOALCURRENT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'val'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_setgoalcurrent\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var val = Blockly.Python.valueToCode(block, 'val', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.setGoalCurrent(${val})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_setprofileacceleration\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETPROFILEACCELERATION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'val'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_setprofileacceleration\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var val = Blockly.Python.valueToCode(block, 'val', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.setProfileAcceleration(${val})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_setprofilevelocity\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETPROFILEVELOCITY,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'val'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_setprofilevelocity\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var val = Blockly.Python.valueToCode(block, 'val', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.setProfileVelocity(${val})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_dynamixeldriverOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'dynamixeldriver_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'servo'\n        }, {\n          'type': 'input_value',\n          'name': 'gain'\n        }, {\n          'type': 'input_value',\n          'name': 'saturation'\n        }, {\n          'type': 'input_value',\n          'name': 'name'\n        }, {\n          'type': 'input_value',\n          'name': 'offset_pos'\n        }, {\n          'type': 'input_value',\n          'name': 'min_pos'\n        }, {\n          'type': 'input_value',\n          'name': 'max_pos'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var servo = Blockly.Python.valueToCode(block, 'servo', Blockly.Python.ORDER_FUNCTION_CALL);\n  var gain = Blockly.Python.valueToCode(block, 'gain', Blockly.Python.ORDER_FUNCTION_CALL);\n  var saturation = Blockly.Python.valueToCode(block, 'saturation', Blockly.Python.ORDER_FUNCTION_CALL);\n  var name = Blockly.Python.valueToCode(block, 'name', Blockly.Python.ORDER_FUNCTION_CALL);\n  var offset_pos = Blockly.Python.valueToCode(block, 'offset_pos', Blockly.Python.ORDER_FUNCTION_CALL);\n  var min_pos = Blockly.Python.valueToCode(block, 'min_pos', Blockly.Python.ORDER_FUNCTION_CALL);\n  var max_pos = Blockly.Python.valueToCode(block, 'max_pos', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = DynamixelDriver(${servo}, ${gain}, ${saturation}, ${name}, ${offset_pos}, ${min_pos}, ${max_pos})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_INIT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.init()\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_update\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_UPDATE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_update\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.update()\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_getpresentposition\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_GETPRESENTPOSITION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_getpresentposition\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.getPresentPosition()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_settorque\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETTORQUE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'flag'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_settorque\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var flag = Blockly.Python.valueToCode(block, 'flag', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.setTorque(${flag})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_setgoalposition\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETGOALPOSITION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'angle'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_setgoalposition\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var angle = Blockly.Python.valueToCode(block, 'angle', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.setGoalPosition(${angle})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_dynamixeldriverOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'dynamixeldriver_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = DynamixelDriver()\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_settorque\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_SETTORQUE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'flag'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_settorque\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var flag = Blockly.Python.valueToCode(block, 'flag', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.setTorque(${flag})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_onattached\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_ONATTACHED,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_onattached\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.onAttached()\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_ondetached\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_ONDETACHED,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_ondetached\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.onDetached()\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_control\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_CONTROL,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tm'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_control\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tm = Blockly.Python.valueToCode(block, 'tm', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.control(${tm})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_applyrotation\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_APPLYROTATION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'pose'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_applyrotation\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var pose = Blockly.Python.valueToCode(block, 'pose', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.applyRotation(${pose})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_getrotation\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_GETROTATION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_getrotation\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.getRotation()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_move\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_MOVE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'h_deg'\n        }, {\n          'type': 'input_value',\n          'name': 'v_deg'\n        }, {\n          \"type\": \"field_switch\",\n          \"name\": \"force_update\",\n          \"options\": [\n            ['True', 'True'],\n            ['False', 'False']\n          ],\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_move\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var h_deg = Blockly.Python.valueToCode(block, 'h_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  var v_deg = Blockly.Python.valueToCode(block, 'v_deg', Blockly.Python.ORDER_FUNCTION_CALL);\n  var force_update = block.getFieldValue('force_update');\n  return `${varname}.move(${h_deg}, ${v_deg}, ${force_update})\\n`\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_get_position\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_GET_POSITION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_get_position\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.get_position()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_dynamixeldriver_update\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_DYNAMIXELDRIVER_UPDATE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_dynamixeldriverOptions\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_dynamixeldriver_update\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.update()\\n`\n}","toolbox":"\n<category name=\"DynamixelDriver\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_dynamixeldriver\">\n<title text=\"DynamixelDriver\" docsLink=\"\"></title>\n<block type=\"custom_dynamixeldriver_init\">\n  <value name=\"id\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1</field>\n    </shadow>\n  </value>\n  <value name=\"rx\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">6</field>\n    </shadow>\n  </value>\n  <value name=\"tx\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">7</field>\n    </shadow>\n  </value>\n  <value name=\"baud_rate\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1000000</field>\n    </shadow>\n  </value>\n  <value name=\"bits\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">8</field>\n    </shadow>\n  </value>\n  <value name=\"parity\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">None</field>\n    </shadow>\n  </value>\n  <value name=\"stop\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1</field>\n    </shadow>\n  </value>\n  <value name=\"uart_id\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_checksum\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_make_command\">\n  <value name=\"inst\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"addr\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"params\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_send_command\">\n  <value name=\"inst\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"addr\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"params\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_parse\">\n  <value name=\"data\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_readpresentposition\"/><block type=\"custom_dynamixeldriver_setoperatingmode\">\n  <value name=\"mode\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_settorque\">\n  <value name=\"enable\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_setgoalposition\">\n  <value name=\"pos\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_setgoalcurrent\">\n  <value name=\"val\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_setprofileacceleration\">\n  <value name=\"val\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_setprofilevelocity\">\n  <value name=\"val\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_init\">\n  <value name=\"servo\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"gain\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"saturation\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"name\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">servo</field>\n    </shadow>\n  </value>\n  <value name=\"offset_pos\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">2048</field>\n    </shadow>\n  </value>\n  <value name=\"min_pos\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">-180</field>\n    </shadow>\n  </value>\n  <value name=\"max_pos\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">180</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_init\"/><block type=\"custom_dynamixeldriver_update\"/><block type=\"custom_dynamixeldriver_getpresentposition\"/><block type=\"custom_dynamixeldriver_settorque\">\n  <value name=\"flag\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_setgoalposition\">\n  <value name=\"angle\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_init\"/><block type=\"custom_dynamixeldriver_settorque\">\n  <value name=\"flag\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_onattached\"/><block type=\"custom_dynamixeldriver_ondetached\"/><block type=\"custom_dynamixeldriver_control\">\n  <value name=\"tm\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_applyrotation\">\n  <value name=\"pose\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_dynamixeldriver_getrotation\"/><block type=\"custom_dynamixeldriver_move\">\n  <value name=\"h_deg\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"v_deg\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <field name=\"force_update\">False</field>\n</block><block type=\"custom_dynamixeldriver_get_position\"/><block type=\"custom_dynamixeldriver_update\"/>\n</category>\n","toolboxitemid":"custom_dynamixeldriver","block_type":["custom_dynamixeldriver___init__","custom_dynamixeldriver_checksum","custom_dynamixeldriver_make_command","custom_dynamixeldriver_send_command","custom_dynamixeldriver_parse","custom_dynamixeldriver_readpresentposition","custom_dynamixeldriver_setoperatingmode","custom_dynamixeldriver_settorque","custom_dynamixeldriver_setgoalposition","custom_dynamixeldriver_setgoalcurrent","custom_dynamixeldriver_setprofileacceleration","custom_dynamixeldriver_setprofilevelocity","custom_dynamixeldriver___init__","custom_dynamixeldriver_init","custom_dynamixeldriver_update","custom_dynamixeldriver_getpresentposition","custom_dynamixeldriver_settorque","custom_dynamixeldriver_setgoalposition","custom_dynamixeldriver___init__","custom_dynamixeldriver_settorque","custom_dynamixeldriver_onattached","custom_dynamixeldriver_ondetached","custom_dynamixeldriver_control","custom_dynamixeldriver_applyrotation","custom_dynamixeldriver_getrotation","custom_dynamixeldriver_move","custom_dynamixeldriver_get_position","custom_dynamixeldriver_update"]},"data":{"name":"DynamixelDriver","note":{},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"","time":"","author":"","email":"","license":""},"assignments":[],"example":"","source_internal":"","source_external":"import machine\r\nfrom machine import UART\r\nimport struct\r\nimport math\r\nINSTRUCTION = {\r\n  'PING': 0x01,\r\n  'READ': 0x02,\r\n  'WRITE': 0x03,\r\n  'REG_WRITE': 0x04,\r\n  'ACTION': 0x05,\r\n  'FACTORY_RESET': 0x06,\r\n  'REBOOT': 0x08,\r\n  'STATUS': 0x55,\r\n  'SYNC_READ': 0x82,\r\n  'SYNC_WRITE': 0x83,\r\n  'BULK_READ': 0x92,\r\n  'BULK_WRITE': 0x93,\r\n}\r\nOPERATING_MODE = {\r\n  'CURRENT': 0x00,\r\n  'VELOCITY': 0x01,\r\n  'POSITION': 0x03,\r\n  'EXTENDED_POSITION': 0x04,\r\n  'CURRENT_BASED_POSITION': 0x05,\r\n  'PWM': 0x10,\r\n}\r\nADDRESS = {\r\n  'MODEL_NUMBER': 0,\r\n  'MODEL_INFORMATION': 2,\r\n  'VERSION_OF_FIRMWARE': 6,\r\n  'ID': 7,\r\n  'BAUDRATE': 8,\r\n  'RETURN_DELAY_TIME': 9,\r\n  'DRIVE_MODE': 10,\r\n  'OPERATING_MODE': 11,\r\n  'HOMING_OFFSET': 20,\r\n  'TORQUE_ENABLE': 64,\r\n  'LED': 65,\r\n  'GOAL_CURRENT': 102,\r\n  'GOAL_POSITION': 116,\r\n  'PROFILE_ACCELERATION': 108,\r\n  'PROFILE_VELOCITY': 112,\r\n  'PRESENT_CURRENT': 126,\r\n  'PRESENT_VELOCITY': 128,\r\n  'PRESENT_POSITION': 132,\r\n}\r","members":[{"name":"__init__","note":{},"label":{"en":"%1 init, id: %2 , rx: %3 , tx: %4 , baud_rate: %5 , bits: %6 , parity: %7 , stop: %8 , uart_id: %9"},"params":[{"name":"id","type":"int","default":"1","note":{},"field":""},{"name":"rx","type":"int","default":"6","note":{},"field":""},{"name":"tx","type":"int","default":"7","note":{},"field":""},{"name":"baud_rate","type":"int","default":"1000000","note":{},"field":""},{"name":"bits","type":"int","default":"8","note":{},"field":""},{"name":"parity","type":null,"default":"None","note":{},"field":""},{"name":"stop","type":"int","default":"1","note":{},"field":""},{"name":"uart_id","type":"int","default":"1","note":{},"field":""}],"return":"","source":"        self.uart=UART(uart_id, baud_rate)\r\n        self.uart.init(baud_rate, bits=bits, parity=parity, stop=stop, rx=rx, tx=tx)\r\n        self.id = id\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"checksum","note":{},"label":{"en":" %1 checksum, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        end = len(data)\r\n        crc16 = 0\r\n        for i in range(end):\r\n            n = int(data[i])\r\n            crc16 = (crc16 ^ (n << 8)) & 0xffff\r\n            for _ in range(8):\r\n                if crc16 & 0x8000:\r\n                    crc16 = ((crc16 << 1) ^ 0x8005) & 0xffff\r\n                else:\r\n                    crc16 = (crc16 << 1) & 0xffff\r\n        return crc16\r","ast_return":{"code":"crc16","id":null},"doc_return":null},{"name":"make_command","note":{},"label":{"en":" %1 make_command, inst: %2, addr: %3, params: %4"},"params":[{"name":"inst","type":null,"default":null,"note":{},"field":""},{"name":"addr","type":null,"default":null,"note":{},"field":""},{"name":"params","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        packet = bytearray([0xff,0xff,0xfd,0x00, self.id, 0, 0])\r\n        packet.append(inst & 0xff)\r\n        if addr:\r\n            packet.append(addr & 0xff)\r\n            packet.append((addr >> 8) & 0xff)\r\n        for x in params:\r\n            packet.append(x)\r\n        len_ = len(packet) - 5\r\n        packet[5] = (len_ & 0xff)\r\n        packet[6] = ((len_ >> 8) & 0xff)\r\n        crc16 = self.checksum(bytes(packet))\r\n        packet.append(crc16 & 0xff)\r\n        packet.append((crc16 >> 8) & 0xff)\r\n        return packet\r","ast_return":{"code":"packet","id":null},"doc_return":null},{"name":"send_command","note":{},"label":{"en":" %1 send_command, inst: %2, addr: %3, params: %4"},"params":[{"name":"inst","type":null,"default":null,"note":{},"field":""},{"name":"addr","type":null,"default":null,"note":{},"field":""},{"name":"params","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self.uart.write(self.make_command(inst, addr, params))\r\n        res = ''\r\n        while not res:\r\n            res = self.uart.read()\r\n        return res\r","ast_return":{"code":"res","id":null},"doc_return":null},{"name":"parse","note":{},"label":{"en":" %1 parse, data: %2"},"params":[{"name":"data","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        if data[:4] == b'\\xff\\xff\\xfd\\00':\r\n            if self.checksum(data[:-2]) == struct.unpack('<H', data[-2:])[0]:\r\n                len_ = struct.unpack('<H', data[5:7])[0]\r\n                #print(\"OK\", len_,  data)\r\n                return len_\r\n        print(\"Invalid packet\", data)\r\n        return  -1\r","ast_return":{"code":"-1","id":null},"doc_return":null},{"name":"readPresentPosition","note":{},"label":{"en":" %1 readPresentPosition"},"params":[],"return":"","source":"        res = self.send_command(INSTRUCTION['READ'], ADDRESS['PRESENT_POSITION'], b'\\x04\\x00')\r\n        len_=self.parse(res)\r\n        if len_ == 8:\r\n            if res[7:9] == b'\\x55\\00':\r\n                pos=struct.unpack('<i', res[9:13])[0]\r\n                return pos\r\n        return None\r","ast_return":{"code":"None","id":null},"doc_return":null},{"name":"setOperatingMode","note":{},"label":{"en":" %1 setOperatingMode, mode: %2"},"params":[{"name":"mode","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['OPERATING_MODE'], struct.pack('B', mode))\r\n        return self.parse(res) > 0\r","ast_return":{"code":"self.parse(res) > 0","id":null},"doc_return":null},{"name":"setTorque","note":{},"label":{"en":" %1 setTorque, enable: %2"},"params":[{"name":"enable","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['TORQUE_ENABLE'], struct.pack('B', enable))\r\n        return self.parse(res) > 0\r","ast_return":{"code":"self.parse(res) > 0","id":null},"doc_return":null},{"name":"setGoalPosition","note":{},"label":{"en":" %1 setGoalPosition, pos: %2"},"params":[{"name":"pos","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['GOAL_POSITION'], struct.pack('<I', pos))\r\n        return self.parse(res) > 0\r","ast_return":{"code":"self.parse(res) > 0","id":null},"doc_return":null},{"name":"setGoalCurrent","note":{},"label":{"en":" %1 setGoalCurrent, val: %2"},"params":[{"name":"val","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['GOAL_CURRENT'], struct.pack('<H', val))\r\n        return self.parse(res) > 0\r","ast_return":{"code":"self.parse(res) > 0","id":null},"doc_return":null},{"name":"setProfileAcceleration","note":{},"label":{"en":" %1 setProfileAcceleration, val: %2"},"params":[{"name":"val","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['PROFILE_ACCELERATION'],struct.pack('<I', val))\r\n        return self.parse(res) > 0\r","ast_return":{"code":"self.parse(res) > 0","id":null},"doc_return":null},{"name":"setProfileVelocity","note":{},"label":{"en":" %1 setProfileVelocity, val: %2"},"params":[{"name":"val","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['PROFILE_VELOCITY'],struct.pack('<I', val))\r\n        return self.parse(res) > 0\r","ast_return":{"code":"self.parse(res) > 0","id":null},"doc_return":null},{"name":"__init__","note":{},"label":{"en":" %1 init, servo: %2, gain: %3, saturation: %4, name: %5, offset_pos: %6, min_pos: %7, max_pos: %8"},"params":[{"name":"servo","type":null,"default":null,"note":{},"field":""},{"name":"gain","type":null,"default":null,"note":{},"field":""},{"name":"saturation","type":null,"default":null,"note":{},"field":""},{"name":"name","type":"str","default":"servo","note":{},"field":""},{"name":"offset_pos","type":"int","default":"2048","note":{},"field":""},{"name":"min_pos","type":"int","default":"-180","note":{},"field":""},{"name":"max_pos","type":"int","default":"180","note":{},"field":""}],"return":"","source":"                  name='servo', offset_pos=2048,\r\n                  min_pos=-180, max_pos=180):\r\n        self.servo = servo\r\n        self.gain = gain\r\n        self.saturation = saturation\r\n        self.name = name\r\n        self._offset = offset_pos\r\n        self.goalPosition = 0\r\n        self.presentPosition = 0\r\n        self._lastGoalPosition = 0\r\n        self.init_pos = 0\r\n        self.min_pos = min_pos\r\n        self.max_pos = max_pos\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"init","note":{},"label":{"en":" %1 init"},"params":[],"return":"","source":"        result = self.servo.readPresentPosition()\r\n        if result is not None:\r\n            while result - self._offset > 4096:\r\n                self._offset += 4096\r\n            while result + self._offset < -4096:\r\n                self._offset -= 4096\r\n        else:\r\n            print(\"Fail to initialize\")\r\n            return\r\n        self.goalPosition = 0\r\n        self.servo.setOperatingMode(OPERATING_MODE['CURRENT_BASED_POSITION'])\r\n        self.servo.setTorque(True)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"update","note":{},"label":{"en":" %1 update"},"params":[],"return":"","source":"        if self._lastGoalPosition != self.goalPosition:\r\n            self.servo.setGoalPosition(self.goalPosition+self._offset)\r\n            self._lastGoalPosition = self.goalPosition\r\n        result = self.servo.readPresentPosition()\r\n        if result is None:\r\n            return\r\n        self.presentPosition = result - self._offset\r\n        current = min(abs(self.goalPosition - self.presentPosition) * self.gain, self.saturation )\r\n        self.servo.setGoalCurrent(int(current))\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"getPresentPosition","note":{},"label":{"en":" %1 getPresentPosition"},"params":[],"return":"","source":"        return (self.presentPosition * 360) // 4096\r","ast_return":{"code":"self.presentPosition * 360 // 4096","id":null},"doc_return":null},{"name":"setTorque","note":{},"label":{"en":" %1 setTorque, flag: %2"},"params":[{"name":"flag","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self.servo.setTorque(flag)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"setGoalPosition","note":{},"label":{"en":" %1 setGoalPosition, angle: %2"},"params":[{"name":"angle","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self.goalPosition = math.floor((min(max(angle, self.min_pos), self.max_pos)) * 4096 / 360)\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"__init__","note":{},"label":{"en":" %1 init"},"params":[],"return":"","source":"        self._pan = Dynamixel(1)\r\n        self._tilt = Dynamixel(2)\r\n        pan_offset = self._pan.readPresentPosition()\r\n        tilt_offset = self._tilt.readPresentPosition()\r\n        self._controls = [\r\n                            PConrtol(self._pan, 0.15, 80, 'pan', pan_offset, -180, 180),\r\n                            PConrtol(self._tilt, 4, 800, 'tilt', tilt_offset, -20, 7)\r\n                          ]\r\n        self._torque = True\r\n        self._initialzed = False\r\n        self.control_timer=machine.Timer(2)\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"setTorque","note":{},"label":{"en":" %1 setTorque, flag: %2"},"params":[{"name":"flag","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        self._torque = flag\r\n        [x.setTorque(self._torque) for x in self._controls]\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"onAttached","note":{},"label":{"en":" %1 onAttached"},"params":[],"return":"","source":"        self.control_timer.init(mode=machine.Timer.PERIODIC,period=125,callback=self.control)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"onDetached","note":{},"label":{"en":" %1 onDetached"},"params":[],"return":"","source":"        self.control_timer.deinit()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"control","note":{},"label":{"en":" %1 control, tm: %2"},"params":[{"name":"tm","type":"int","default":"0","note":{},"field":""}],"return":"","source":"        if not self._initialzed :\r\n            self._initialzed = True\r\n            for ctrl in self._controls:\r\n                ctrl.init()\r\n            self._pan.setProfileAcceleration(20)\r\n            self._pan.setProfileVelocity(100)\r\n        for ctrl in self._controls:\r\n            ctrl.update()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"applyRotation","note":{},"label":{"en":" %1 applyRotation, pose: %2"},"params":[{"name":"pose","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        panAngle = pose[0] * 180/math.pi\r\n        tiltAngle = pose[1] * 180/math.pi\r\n        self._controls[0].setGoalPosition(panAngle)\r\n        self._controls[1].setGoalPosition(tiltAngle)\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"getRotation","note":{},"label":{"en":" %1 getRotation"},"params":[],"return":"","source":"        p1, p2 =  [x.getPresentPosition()  for x in self._controls]\r\n        return { 'r': 0.0, 'y': p1 * math.pi / 180, 'p': p2 * math.pi / 180}\r","ast_return":{"code":"{'r': 0.0, 'y': p1 * math.pi / 180, 'p': p2 * math.pi / 180}","id":null},"doc_return":null},{"name":"move","note":{},"label":{"en":" %1 move, h_deg: %2, v_deg: %3, force_update: %4"},"params":[{"name":"h_deg","type":null,"default":null,"note":{},"field":""},{"name":"v_deg","type":null,"default":null,"note":{},"field":""},{"name":"force_update","type":"bool","default":"False","note":{},"field":"switch"}],"return":"","source":"        self._controls[0].setGoalPosition(h_deg)\r\n        self._controls[1].setGoalPosition(v_deg)\r\n        if force_update:\r\n            for ctrl in self._controls:\r\n                ctrl.update()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"get_position","note":{},"label":{"en":" %1 get_position"},"params":[],"return":"","source":"        return [x.getPresentPosition()  for x in self._controls]\r","ast_return":{"code":"[x.getPresentPosition() for x in self._controls]","id":null},"doc_return":null},{"name":"update","note":{},"label":{"en":" %1 update"},"params":[],"return":"","source":"        self.control()\r\n        return\r","ast_return":{"code":null,"id":null},"doc_return":null}],"python_file_name":"dynamixeldriver"},"pyCode":"\n\"\"\"\nfile     DynamixelDriver\ntime     2025-09-01\nauthor   \nemail   \nlicense  \n\"\"\"\n\nimport machine\nfrom machine import UART\nimport struct\nimport math\nINSTRUCTION = {\n  'PING': 0x01,\n  'READ': 0x02,\n  'WRITE': 0x03,\n  'REG_WRITE': 0x04,\n  'ACTION': 0x05,\n  'FACTORY_RESET': 0x06,\n  'REBOOT': 0x08,\n  'STATUS': 0x55,\n  'SYNC_READ': 0x82,\n  'SYNC_WRITE': 0x83,\n  'BULK_READ': 0x92,\n  'BULK_WRITE': 0x93,\n}\nOPERATING_MODE = {\n  'CURRENT': 0x00,\n  'VELOCITY': 0x01,\n  'POSITION': 0x03,\n  'EXTENDED_POSITION': 0x04,\n  'CURRENT_BASED_POSITION': 0x05,\n  'PWM': 0x10,\n}\nADDRESS = {\n  'MODEL_NUMBER': 0,\n  'MODEL_INFORMATION': 2,\n  'VERSION_OF_FIRMWARE': 6,\n  'ID': 7,\n  'BAUDRATE': 8,\n  'RETURN_DELAY_TIME': 9,\n  'DRIVE_MODE': 10,\n  'OPERATING_MODE': 11,\n  'HOMING_OFFSET': 20,\n  'TORQUE_ENABLE': 64,\n  'LED': 65,\n  'GOAL_CURRENT': 102,\n  'GOAL_POSITION': 116,\n  'PROFILE_ACCELERATION': 108,\n  'PROFILE_VELOCITY': 112,\n  'PRESENT_CURRENT': 126,\n  'PRESENT_VELOCITY': 128,\n  'PRESENT_POSITION': 132,\n}\n\nclass DynamixelDriver:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, id: int = 1, rx: int = 6, tx: int = 7, baud_rate: int = 1000000, bits: int = 8, parity = None, stop: int = 1, uart_id: int = 1):\n        \"\"\"\n        label:\n            en: '%1 init, id: %2 , rx: %3 , tx: %4 , baud_rate: %5 , bits: %6 , parity: %7\n                , stop: %8 , uart_id: %9'\n        params:\n            id:\n                name: id\n                type: int\n                default: '1'\n            rx:\n                name: rx\n                type: int\n                default: '6'\n            tx:\n                name: tx\n                type: int\n                default: '7'\n            baud_rate:\n                name: baud_rate\n                type: int\n                default: '1000000'\n            bits:\n                name: bits\n                type: int\n                default: '8'\n            parity:\n                name: parity\n                default: None\n            stop:\n                name: stop\n                type: int\n                default: '1'\n            uart_id:\n                name: uart_id\n                type: int\n                default: '1'\n        \"\"\"\n        self.uart=UART(uart_id, baud_rate)\n        self.uart.init(baud_rate, bits=bits, parity=parity, stop=stop, rx=rx, tx=tx)\n        self.id = id\n\n    def checksum(self, data):\n        \"\"\"\n        label:\n            en: ' %1 checksum, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n        end = len(data)\n        crc16 = 0\n        for i in range(end):\n            n = int(data[i])\n            crc16 = (crc16 ^ (n << 8)) & 0xffff\n            for _ in range(8):\n                if crc16 & 0x8000:\n                    crc16 = ((crc16 << 1) ^ 0x8005) & 0xffff\n                else:\n                    crc16 = (crc16 << 1) & 0xffff\n        return crc16\n\n    def make_command(self, inst, addr, params):\n        \"\"\"\n        label:\n            en: ' %1 make_command, inst: %2, addr: %3, params: %4'\n        params:\n            inst:\n                name: inst\n            addr:\n                name: addr\n            params:\n                name: params\n        \"\"\"\n        packet = bytearray([0xff,0xff,0xfd,0x00, self.id, 0, 0])\n        packet.append(inst & 0xff)\n        if addr:\n            packet.append(addr & 0xff)\n            packet.append((addr >> 8) & 0xff)\n        for x in params:\n            packet.append(x)\n        len_ = len(packet) - 5\n        packet[5] = (len_ & 0xff)\n        packet[6] = ((len_ >> 8) & 0xff)\n        crc16 = self.checksum(bytes(packet))\n        packet.append(crc16 & 0xff)\n        packet.append((crc16 >> 8) & 0xff)\n        return packet\n\n    def send_command(self, inst, addr, params):\n        \"\"\"\n        label:\n            en: ' %1 send_command, inst: %2, addr: %3, params: %4'\n        params:\n            inst:\n                name: inst\n            addr:\n                name: addr\n            params:\n                name: params\n        \"\"\"\n        self.uart.write(self.make_command(inst, addr, params))\n        res = ''\n        while not res:\n            res = self.uart.read()\n        return res\n\n    def parse(self, data):\n        \"\"\"\n        label:\n            en: ' %1 parse, data: %2'\n        params:\n            data:\n                name: data\n        \"\"\"\n        if data[:4] == b'\\xff\\xff\\xfd\\00':\n            if self.checksum(data[:-2]) == struct.unpack('<H', data[-2:])[0]:\n                len_ = struct.unpack('<H', data[5:7])[0]\n                #print(\"OK\", len_,  data)\n                return len_\n        print(\"Invalid packet\", data)\n        return  -1\n\n    def readPresentPosition(self):\n        \"\"\"\n        label:\n            en: ' %1 readPresentPosition'\n        \"\"\"\n        res = self.send_command(INSTRUCTION['READ'], ADDRESS['PRESENT_POSITION'], b'\\x04\\x00')\n        len_=self.parse(res)\n        if len_ == 8:\n            if res[7:9] == b'\\x55\\00':\n                pos=struct.unpack('<i', res[9:13])[0]\n                return pos\n        return None\n\n    def setOperatingMode(self, mode):\n        \"\"\"\n        label:\n            en: ' %1 setOperatingMode, mode: %2'\n        params:\n            mode:\n                name: mode\n        \"\"\"\n        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['OPERATING_MODE'], struct.pack('B', mode))\n        return self.parse(res) > 0\n\n    def setTorque(self, enable):\n        \"\"\"\n        label:\n            en: ' %1 setTorque, enable: %2'\n        params:\n            enable:\n                name: enable\n        \"\"\"\n        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['TORQUE_ENABLE'], struct.pack('B', enable))\n        return self.parse(res) > 0\n\n    def setGoalPosition(self, pos):\n        \"\"\"\n        label:\n            en: ' %1 setGoalPosition, pos: %2'\n        params:\n            pos:\n                name: pos\n        \"\"\"\n        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['GOAL_POSITION'], struct.pack('<I', pos))\n        return self.parse(res) > 0\n\n    def setGoalCurrent(self, val):\n        \"\"\"\n        label:\n            en: ' %1 setGoalCurrent, val: %2'\n        params:\n            val:\n                name: val\n        \"\"\"\n        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['GOAL_CURRENT'], struct.pack('<H', val))\n        return self.parse(res) > 0\n\n    def setProfileAcceleration(self, val):\n        \"\"\"\n        label:\n            en: ' %1 setProfileAcceleration, val: %2'\n        params:\n            val:\n                name: val\n        \"\"\"\n        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['PROFILE_ACCELERATION'],struct.pack('<I', val))\n        return self.parse(res) > 0\n\n    def setProfileVelocity(self, val):\n        \"\"\"\n        label:\n            en: ' %1 setProfileVelocity, val: %2'\n        params:\n            val:\n                name: val\n        \"\"\"\n        res = self.send_command(INSTRUCTION['WRITE'], ADDRESS['PROFILE_VELOCITY'],struct.pack('<I', val))\n        return self.parse(res) > 0\n\n    def __init__(self, servo, gain, saturation, name: str = 'servo', offset_pos: int = 2048, min_pos: int = -180, max_pos: int = 180):\n        \"\"\"\n        label:\n            en: ' %1 init, servo: %2, gain: %3, saturation: %4, name: %5, offset_pos: %6,\n                min_pos: %7, max_pos: %8'\n        params:\n            servo:\n                name: servo\n            gain:\n                name: gain\n            saturation:\n                name: saturation\n            name:\n                name: name\n                type: str\n                default: servo\n            offset_pos:\n                name: offset_pos\n                type: int\n                default: '2048'\n            min_pos:\n                name: min_pos\n                type: int\n                default: '-180'\n            max_pos:\n                name: max_pos\n                type: int\n                default: '180'\n        \"\"\"\n                  name='servo', offset_pos=2048,\n                  min_pos=-180, max_pos=180):\n        self.servo = servo\n        self.gain = gain\n        self.saturation = saturation\n        self.name = name\n        self._offset = offset_pos\n        self.goalPosition = 0\n        self.presentPosition = 0\n        self._lastGoalPosition = 0\n        self.init_pos = 0\n        self.min_pos = min_pos\n        self.max_pos = max_pos\n\n    def init(self):\n        \"\"\"\n        label:\n            en: ' %1 init'\n        \"\"\"\n        result = self.servo.readPresentPosition()\n        if result is not None:\n            while result - self._offset > 4096:\n                self._offset += 4096\n            while result + self._offset < -4096:\n                self._offset -= 4096\n        else:\n            print(\"Fail to initialize\")\n            return\n        self.goalPosition = 0\n        self.servo.setOperatingMode(OPERATING_MODE['CURRENT_BASED_POSITION'])\n        self.servo.setTorque(True)\n        return\n\n    def update(self):\n        \"\"\"\n        label:\n            en: ' %1 update'\n        \"\"\"\n        if self._lastGoalPosition != self.goalPosition:\n            self.servo.setGoalPosition(self.goalPosition+self._offset)\n            self._lastGoalPosition = self.goalPosition\n        result = self.servo.readPresentPosition()\n        if result is None:\n            return\n        self.presentPosition = result - self._offset\n        current = min(abs(self.goalPosition - self.presentPosition) * self.gain, self.saturation )\n        self.servo.setGoalCurrent(int(current))\n\n    def getPresentPosition(self):\n        \"\"\"\n        label:\n            en: ' %1 getPresentPosition'\n        \"\"\"\n        return (self.presentPosition * 360) // 4096\n\n    def setTorque(self, flag):\n        \"\"\"\n        label:\n            en: ' %1 setTorque, flag: %2'\n        params:\n            flag:\n                name: flag\n        \"\"\"\n        self.servo.setTorque(flag)\n        return\n\n    def setGoalPosition(self, angle):\n        \"\"\"\n        label:\n            en: ' %1 setGoalPosition, angle: %2'\n        params:\n            angle:\n                name: angle\n        \"\"\"\n        self.goalPosition = math.floor((min(max(angle, self.min_pos), self.max_pos)) * 4096 / 360)\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: ' %1 init'\n        \"\"\"\n        self._pan = Dynamixel(1)\n        self._tilt = Dynamixel(2)\n        pan_offset = self._pan.readPresentPosition()\n        tilt_offset = self._tilt.readPresentPosition()\n        self._controls = [\n                            PConrtol(self._pan, 0.15, 80, 'pan', pan_offset, -180, 180),\n                            PConrtol(self._tilt, 4, 800, 'tilt', tilt_offset, -20, 7)\n                          ]\n        self._torque = True\n        self._initialzed = False\n        self.control_timer=machine.Timer(2)\n\n    def setTorque(self, flag):\n        \"\"\"\n        label:\n            en: ' %1 setTorque, flag: %2'\n        params:\n            flag:\n                name: flag\n        \"\"\"\n        self._torque = flag\n        [x.setTorque(self._torque) for x in self._controls]\n        return\n\n    def onAttached(self):\n        \"\"\"\n        label:\n            en: ' %1 onAttached'\n        \"\"\"\n        self.control_timer.init(mode=machine.Timer.PERIODIC,period=125,callback=self.control)\n        return\n\n    def onDetached(self):\n        \"\"\"\n        label:\n            en: ' %1 onDetached'\n        \"\"\"\n        self.control_timer.deinit()\n        return\n\n    def control(self, tm: int = 0):\n        \"\"\"\n        label:\n            en: ' %1 control, tm: %2'\n        params:\n            tm:\n                name: tm\n                type: int\n                default: '0'\n        \"\"\"\n        if not self._initialzed :\n            self._initialzed = True\n            for ctrl in self._controls:\n                ctrl.init()\n            self._pan.setProfileAcceleration(20)\n            self._pan.setProfileVelocity(100)\n        for ctrl in self._controls:\n            ctrl.update()\n        return\n\n    def applyRotation(self, pose):\n        \"\"\"\n        label:\n            en: ' %1 applyRotation, pose: %2'\n        params:\n            pose:\n                name: pose\n        \"\"\"\n        panAngle = pose[0] * 180/math.pi\n        tiltAngle = pose[1] * 180/math.pi\n        self._controls[0].setGoalPosition(panAngle)\n        self._controls[1].setGoalPosition(tiltAngle)\n        return\n\n    def getRotation(self):\n        \"\"\"\n        label:\n            en: ' %1 getRotation'\n        \"\"\"\n        p1, p2 =  [x.getPresentPosition()  for x in self._controls]\n        return { 'r': 0.0, 'y': p1 * math.pi / 180, 'p': p2 * math.pi / 180}\n\n    def move(self, h_deg, v_deg, force_update: bool = False):\n        \"\"\"\n        label:\n            en: ' %1 move, h_deg: %2, v_deg: %3, force_update: %4'\n        params:\n            h_deg:\n                name: h_deg\n            v_deg:\n                name: v_deg\n            force_update:\n                name: force_update\n                type: bool\n                default: 'False'\n                field: switch\n        \"\"\"\n        self._controls[0].setGoalPosition(h_deg)\n        self._controls[1].setGoalPosition(v_deg)\n        if force_update:\n            for ctrl in self._controls:\n                ctrl.update()\n        return\n\n    def get_position(self):\n        \"\"\"\n        label:\n            en: ' %1 get_position'\n        \"\"\"\n        return [x.getPresentPosition()  for x in self._controls]\n\n    def update(self):\n        \"\"\"\n        label:\n            en: ' %1 update'\n        \"\"\"\n        self.control()\n        return\n\n\n","version":"alpha2"}